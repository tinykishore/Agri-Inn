{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome Agri-Inn","text":"<p>Agri-Inn revolutionizes livestock farming by seamlessly connecting users, streamlining operations, and fostering community collaboration for a sustainable and closely-knit farming future.</p> <p>To learn more about Agri-Inn, visit About Us.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<p>To view each feature, visit Features.</p> <p>To view comprehensive documentation for each feature, visit Documentation.</p> <p>To view the API documentation, visit API References.</p> <p>To view the database documentation, visit Database References.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have met the following requirements:</p> <ul> <li>Operating system: Windows 10 or newer, 64-bit macOS 10.13+, or Linux, including Ubuntu, RedHat, CentOS 7+, and others.</li> <li>System architecture: Windows- 64-bit x86, 32-bit x86; macOS- 64-bit x86 &amp; Apple M1 (ARM64); Linux- 64-bit x86, 64-bit aarch64 (AWS Graviton2), 64-bit IBM Power8/Power9, s390x (Linux on IBM Z &amp; LinuxONE).</li> <li>Minimum 150 MB disk space to download and install.</li> <li>Node.js (v14.17.0 or higher)</li> <li>MongoDB (v4.4.6 or higher)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>1. Clone the repository:</p> <pre><code>git clone https://github.com/mariamuna04/Agri-Inn.git\n</code></pre> <p>2. Install node packages</p> <pre><code>npm install\n</code></pre> <p>3. Create <code>.env</code> at the root of the project</p> <p>For Security reasons, the <code>.env</code> file is not included in the repository. Please contact the developers for the <code>.env</code> file.</p> <p>3. Run the project</p> <pre><code>npm run dev\n</code></pre>"},{"location":"#project-layout","title":"Project layout","text":"<p>Below is a full overview of the project layout.</p> <pre><code>\u251c\u2500\u2500\u2500.github                                   # Github related files\n\u251c\u2500\u2500\u2500node_modules                              # Node packages\n\u251c\u2500\u2500\u2500src                                       # Source files (alternatively `app`)\n\u2502   \u251c\u2500\u2500\u2500lib                                   # Libraries\n\u2502   \u2502   \u251c\u2500\u2500\u2500assets                            # Assets (images, videos, icons, etc.)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500icons                         \n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500images                        \n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500notificationIcon              \n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500videos                        \n\u2502   \u2502   \u251c\u2500\u2500\u2500client                            # Client side TypeScript files\n\u2502   \u2502   \u251c\u2500\u2500\u2500components                        # SvelteKit components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500dynamicNavigations            \n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500events\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500farm\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500\u2500forum\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500news\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500payment-section\n\u2502   \u2502   \u251c\u2500\u2500\u2500server                            # Server side TypeScript files\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500databaseObjects               # [See Database References]\n\u2502   \u2502   \u2514\u2500\u2500\u2500stores                            # SvelteKit stores\n\u2502   \u2514\u2500\u2500\u2500routes                                # SvelteKit routes (pages)\n\u2502       \u251c\u2500\u2500\u2500about                             # About Us page\n\u2502       \u251c\u2500\u2500\u2500API                               # API routes\n\u2502       \u2502   \u2514\u2500\u2500\u2500v1\n\u2502       \u2502       \u251c\u2500\u2500\u2500 ...                      # [See API References]\n\u2502       \u251c\u2500\u2500\u2500chat                              # Chat page\n\u2502       \u251c\u2500\u2500\u2500dashboard                         # Dashboard page\n\u2502       \u251c\u2500\u2500\u2500events                            # Events page\n\u2502       \u2502   \u2514\u2500\u2500\u2500[event_id]\n\u2502       \u251c\u2500\u2500\u2500farms                             # Farms page                               \n\u2502       \u2502   \u2514\u2500\u2500\u2500[farm]\n\u2502       \u2502       \u2514\u2500\u2500\u2500[product_id]\n\u2502       \u251c\u2500\u2500\u2500forum                             # Forum page\n\u2502       \u2502   \u2514\u2500\u2500\u2500[id]\n\u2502       \u251c\u2500\u2500\u2500health-track                      # Health Track page\n\u2502       \u251c\u2500\u2500\u2500installments                      # Installments page\n\u2502       \u251c\u2500\u2500\u2500marketplace                       # Marketplace page\n\u2502       \u2502   \u2514\u2500\u2500\u2500cart    \n\u2502       \u251c\u2500\u2500\u2500news                              # News page\n\u2502       \u2502   \u2514\u2500\u2500\u2500[id]\n\u2502       \u251c\u2500\u2500\u2500saved-item                        # Saved Item page\n\u2502       \u251c\u2500\u2500\u2500search                            # Search page\n\u2502       \u251c\u2500\u2500\u2500sign-in                           # Sign In page\n\u2502       \u2502   \u251c\u2500\u2500\u2500forgot-password\n\u2502       \u2502   \u2502   \u2514\u2500\u2500\u2500[password_reset_token]\n\u2502       \u2502   \u2514\u2500\u2500\u2500google  \n\u2502       \u251c\u2500\u2500\u2500sign-up                           # Sign Up page\n\u2502       \u2514\u2500\u2500\u2500[username]                        # User profile page\n\u251c\u2500\u2500\u2500static                                    # Static files (alternatively `public`)\n\u251c\u2500\u2500\u2500.env                                      # Environment variables\n\u251c\u2500\u2500\u2500.gitignore                                # Git ignore file\n\u251c\u2500\u2500\u2500.npmrc                                    # NPM configuration file\n\u251c\u2500\u2500\u2500CODE_OF_CONDUCT.md                        # Code of Conduct\n\u251c\u2500\u2500\u2500LICENSE                                   # License\n\u251c\u2500\u2500\u2500package-lock.json                         # Package lock file     \n\u251c\u2500\u2500\u2500package.json                              # Package file\n\u251c\u2500\u2500\u2500postcss.config.js                         # PostCSS configuration file             \n\u251c\u2500\u2500\u2500README.md                                 # Readme file\n\u251c\u2500\u2500\u2500SECURITY.md                               # Security file\n\u251c\u2500\u2500\u2500svelte.config.js                          # Svelte configuration file\n\u251c\u2500\u2500\u2500tailwind.config.js                        # Tailwind configuration file\n\u251c\u2500\u2500\u2500tsconfig.json                             # TypeScript configuration file\n\u251c\u2500\u2500\u2500vite.config.ts                            # Vite configuration file\n</code></pre>"},{"location":"about/","title":"About Us","text":"<p>Discover the future of livestock farming with our innovative platform, \u201cAgri-Inn\u201d. Tailored for farm owners, and enthusiasts, our website streamlines operations, facilitates livestock sales, and fosters community collaboration. Whether managing farms, participating in forums, or staying updated on industry news and events, our platform seamlessly connects users. Join us in redefining agriculture \u2014 a space where technology harmonizes with tradition to build a sustainable and closely-knit farming community.</p>"},{"location":"about/#our-motivation","title":"Our Motivation","text":"<p>Our motivation arises from a deep commitment to revolutionizing the landscape of livestock farming. We envision a platform that not only streamlines farm management but also nurtures a thriving community of farmers, enthusiasts, and experts. By integrating technology, information, and collaboration, we aim to empower individuals in the livestock industry, fostering sustainable practices and facilitating growth. Our goal is to bridge the gap between traditional farming and modern tools by creating a space where knowledge flows freely, commerce thrives and the future of livestock farming is shaped collectively. Join us on this transformative journey toward a more connected, informed, and sustainable agricultural future.</p>"},{"location":"about/#system-architecture","title":"System Architecture","text":"<p>The system architecture of Agri-Inn is shown below:</p> <ul> <li>SvelteKit - A framework for building web applications of all sizes, with a beautiful development experience and flexible filesystem-based routing.</li> <li>MongoDB - A general purpose, document-based, distributed database built for modern application developers and for the cloud era.</li> <li>Supabase - An open source Firebase alternative. Supabase adds realtime and RESTful APIs to your existing PostgreSQL database without a single line of code.</li> <li>Vercel - Vercel is a cloud platform for static sites and Serverless Functions that fits perfectly with your workflow. It enables developers to host Jamstack websites and web services that deploy instantly, scale automatically, and requires no supervision, all with no configuration.</li> <li>TailwindCSS - A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.</li> <li>PostGreSQL - PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.</li> </ul>"},{"location":"about/#developers","title":"Developers","text":"<ul> <li>Ummay Maria Muna</li> <li>Musfirat Hossain</li> <li>Shanta Biswas</li> </ul>"},{"location":"about/#conclusion","title":"Conclusion","text":"<p>Our platform is more than just a website - it's a transformative force in the world of livestock farming. By seamlessly integrating modern technology with traditional practices, we've created a space where farm owners can efficiently manage their operations, enthusiasts can purchase quality livestock and everyone can engage in meaningful discussions. The collaborative spirit of our community, coupled with the latest industry insights and events, ensures that we are at the forefront of shaping the future of agriculture. Join us on this exciting journey towards a more sustainable, connected, and prosperous livestock farming community.</p>"},{"location":"ajax/","title":"AJAX Usage","text":""},{"location":"ajax/#ajax","title":"AJAX","text":"<p>AJAX is a technique for creating fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.</p> <p>In our project, we use AJAX to fetch data from the server and display it in the UI. We also use AJAX to send data to the server, for example, when a user registers for an event.</p> <p>Fetch API is used in every client-server communication in this project. Whenever a client want to communicate with the server a fetch API call is initiated which makes an AJAX request</p>"},{"location":"ajax/#the-first-two-below-are-done-by-musfirat-hossain","title":"The first two below are done by :  Musfirat Hossain","text":""},{"location":"ajax/#fetch-api-example-fetching-event-information","title":"Fetch API Example: Fetching Event Information","text":"<p>The following code snippet shows how the event information is fetched from the server and displayed in the UI.</p> <pre><code>onMount(async () =&gt; {\n    const response = await fetch('/API/v1/events/GetEventAPI', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            event_id: event_id\n        })\n    });\n});\n</code></pre> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the event information from the server by making a POST request to the '/API/v1/events/GetEventAPI' endpoint.</p> </li> <li> <p>The <code>event_id</code> is passed to the server in the request body. The <code>event_id</code> is obtained from the URL using the    <code>useParams</code> function from Svelte.</p> </li> <li> <p>The fetched event information is stored in the <code>event_detail</code> variable.</p> </li> </ol>"},{"location":"ajax/#fetch-api-example-registering-for-an-event","title":"Fetch API Example: Registering for an Event","text":"<p>The following code snippet shows how a user can register for an event.</p> <pre><code>const register = async () =&gt; {\n    const response = await fetch('/API/v1/events/RegisterEventAPI', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            event_id: event_id\n        })\n    });\n};\n</code></pre> <ol> <li> <p>When the user clicks on the \"Register\" button, the <code>register</code> function is called.</p> </li> <li> <p>The <code>event_id</code> is passed to the server in the request body. The <code>event_id</code> is obtained from the URL using the    <code>useParams</code> function from Svelte.</p> </li> <li> <p>The server responds with a JSON object containing a <code>success</code> field. If <code>success</code> is <code>true</code>, the user is registered    for the event. Otherwise, an error message is displayed.</p> </li> </ol>"},{"location":"ajax/#the-next-two-below-are-done-by-ummay-maria-muna","title":"The next two below are done by : Ummay Maria Muna","text":""},{"location":"ajax/#fetch-api-example-showing-all-farms","title":"FETCH API Example: Showing all Farms","text":"<p>The following code snippet shows how all the farms are fetched from the server and displayed in the UI.</p> <pre><code>onMount(async () =&gt; {\n    const response = await fetch('/API/v1/farms/GetAllFarmsAPI', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            farm_id: farm_id\n        })\n    });\n});\n</code></pre> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the farm information from the server by making a POST request to the '/API/v1/farms/GetAllFarmsAPI' endpoint.</p> </li> <li> <p>The <code>farm_id</code> is passed to the server in the request body. The <code>farm_id</code> is obtained from the URL using the</p> </li> <li> <p>The fetched farm information is stored in the <code>farm_detail</code> variable.</p> </li> </ol>"},{"location":"ajax/#fetch-api-example-showing-one-farm","title":"FETCH API Example: Showing One Farm","text":"<pre><code>const GetOneFarmAPIResponse = await fetch('/API/v1/farms/GetOneFarmAPI', {\n            method: 'POST',\n            body: JSON.stringify(data.farm_id),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n</code></pre> <ol> <li>The code uses the fetch function to make an HTTP POST request to the <code>/API/v1/farms/GetOneFarmAPI</code> endpoint.</li> <li>The request includes a JSON-formatted string in the body, obtained by using <code>JSON.stringify(data.farm_id)</code>.</li> <li>The server responds with a JSON object containing the farm information. The response is stored in the    <code>GetOneFarmAPIResponse</code> variable.If not, an error message is displayed.</li> </ol>"},{"location":"ajax/#the-last-two-below-are-done-by-shanta-biswas","title":"The last two below are done by :  Shanta Biswas","text":""},{"location":"ajax/#fetch-api-example-insert-post","title":"FETCH API Example: Insert Post","text":"<pre><code>const response = await fetch('/API/v1/forum/InsertPostAPI', {\n            method: 'POST',\n            body: JSON.stringify(post),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n</code></pre> <ol> <li>The code initiates a network request using the fetch function. It sends a POST request to the server endpoint <code>/API/v1/forum/InsertPostAPI</code>.</li> <li><code>method: 'POST'</code> specifies that the request is a POST request, which is used for submitting data to be processed to a specified resource and  <code>body: JSON.stringify(post)</code> converts the JavaScript object post into a JSON string. This object has the data to be sent to the server. The server can parse this JSON data on the backend</li> <li><code>headers: {'Content-Type': 'application/json'}</code> sets the content type of the request to JSON. This informs the server that the data being sent is in JSON format.</li> </ol>"},{"location":"ajax/#fetch-api-example-get-all-posts","title":"FETCH API Example:  Get all posts","text":"<pre><code>onMount(async () =&gt; {\n        // Get all posts via API GetAllPostAPI\n        const getAllPostAPIResponse = await fetch('/API/v1/forum/GetAllPostAPI');\n        posts = await getAllPostAPIResponse.json();\n        posts.sort((a:Post, b:Post) =&gt; b.timestamp - a.timestamp);\n    });\n</code></pre> <ol> <li>The fetch function is used to make a GET request to the specified endpoint <code>/API/v1/forum/GetAllPostAPI</code> to retrieve the list of posts.</li> <li>The <code>json()</code> method is called on the response object to parse the response body as JSON. This is necessary because the data received from the server is in JSON format.</li> <li>The parsed posts data is then assigned to the <code>posts</code> variable, which is declared in the Svelte component's script.The sort method is used to sort the posts based on their timestamps in descending order. This ensures that the most recent posts come first.</li> </ol>"},{"location":"api/","title":"API References","text":"<p>This page lists all the API endpoints that are currently available in the project. The API endpoints are grouped by their respective scopes. Scopes are used to determine the access level of the API endpoint. For example, an API endpoint with the scope <code>Public</code> can be accessed by anyone, whereas an API endpoint with the scope <code>Private</code> can only be accessed by a logged-in user. Also, only <code>GET</code> and <code>POST</code> requests are used for this project.</p> <p>Every API receives a JSON object as its request body and returns a JSON object as its response body. The request body is used to pass the required parameters to the API and the response body is used to return the result of the API call. The response body will always contain a <code>status</code> field, which will be either <code>success</code> or <code>error</code>. If the status is <code>success</code>, then the API call was successful, and the response body will contain the result of the API call. If the status is <code>error</code>, then the API call was unsuccessful, and the response body will contain the error message.</p>"},{"location":"api/#available-api-endpoints","title":"Available API Endpoints","text":"<p>Below are the API endpoints that are currently available in v1:</p> <p>Primary symbols used in the table below:</p> API Endpoint Name Type Scope <code>auth.ForgotPasswordAPI</code> <code>POST</code> <code>Public</code> <code>auth.GetPublicProfile</code> <code>POST</code> <code>Public</code> <code>auth.OAuth</code> <code>POST</code> <code>Public</code> <code>auth.RetrieveCache</code> <code>POST</code> <code>Private</code> <code>auth.SignInAPI</code> <code>POST</code> <code>Public</code> <code>events.GetAllEventsAPI</code> <code>GET</code> <code>Private</code> <code>events.GetLatestEvent</code> <code>GET</code> <code>Private</code> <code>events.GetOneEventsAPI</code> <code>POST</code> <code>Private</code> <code>events.RegisterEventAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetFarmsAPI</code> <code>GET</code> <code>Private</code> <code>farms.GetAllVetAPI</code> <code>GET</code> <code>Private</code> <code>farms.GetHealthTrackAPI</code> <code>GET</code> <code>Private</code> <code>farms.AddProductAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetCategoryProducts</code> <code>POST</code> <code>Private</code> <code>farms.GetInstallmentsAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetOneFarmAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetOneFarmProductsAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetProductInfoAPI</code> <code>POST</code> <code>Private</code> <code>farms.PlaceOrderAPI</code> <code>POST</code> <code>Private</code> <code>farms.GetProductCatalogAPI</code> <code>POST</code> <code>Private</code> <code>forum.GetAllPostAPI</code> <code>GET</code> <code>Private</code> <code>forum.GetMostLikedPostsAPI</code> <code>GET</code> <code>Private</code> <code>forum.GetOnePostAPI</code> <code>POST</code> <code>Private</code> <code>forum.IncrementViewCountAPI</code> <code>POST</code> <code>Private</code> <code>forum.InsertPostAPI</code> <code>POST</code> <code>Private</code> <code>forum.SendReplyAPI</code> <code>POST</code> <code>Private</code> <code>forum.UpvotePostAPI</code> <code>POST</code> <code>Private</code> <code>marketplace.getAllProductsmarketAPI</code> <code>GET</code> <code>Private</code> <code>news.GetAllNewsAPI</code> <code>GET</code> <code>Private</code> <code>news.GetOneNewsAPI</code> <code>POST</code> <code>Private</code> <code>news.SaveNewsAPI</code> <code>POST</code> <code>Private</code> <code>misc.GetNotificationAPI</code> <code>POST</code> <code>Private</code> <code>misc.SavedItemsAPI</code> <code>POST</code> <code>Private</code> <code>misc.SearchAllAPI</code> <code>POST</code> <code>Private</code>"},{"location":"api/#definitions","title":"Definitions","text":"<p>Below are the definitions of each API endpoint:</p>"},{"location":"api/#authforgotpasswordapi","title":"<code>auth.ForgotPasswordAPI</code>","text":"<p>This API endpoint is responsible for initiating the password reset process for a user. It receives a JSON object in the request body containing the user's email address and a turnstile token for validation.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/auth/ForgotPasswordAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"email\": \"user@example.com\",\n   \"turnstile_token\": \"example_turnstile_token\"\n}\n</code></pre> <ul> <li><code>email</code> (string): The email address of the user requesting a password reset.</li> <li><code>turnstile_token</code> (string): A turnstile token used for validation.</li> </ul> <p>Response</p> <p>The API responds with an appropriate status code and an empty body.</p> <ul> <li>Status Code 200: Password reset initiated successfully. An email containing the password reset link will be sent to the user.</li> <li>Status Code 401: Unauthorized. The provided turnstile token is invalid.</li> <li>Status Code 500: Internal Server Error. This could occur if there's an issue with token generation, database insertion, or email sending.</li> </ul> <p>Processing Steps</p> <ol> <li>Turnstile Token Validation: The received turnstile token is validated using the cfTurnstileValidation function.    If    the token is invalid, the API returns a 401 Unauthorized response.</li> <li>Email and Token Extraction: The email address and turnstile token are extracted from the request body.</li> <li>Token Generation: A unique reset token is generated using the resetTokenGenerator function.</li> <li>Token Insertion into Database: The generated reset token is inserted into the database using the    <code>DatabaseAccount.insertResetPasswordToken</code> function. If the insertion is successful, the process continues.    Otherwise,    a 500 Internal Server Error response is returned.</li> <li>Email Sending: An email is sent to the user containing a link for password reset. The link includes the generated    reset token. The actual link is formed as: <code>https://agriinn.vercel.app/sign-in/forgot-password/{reset_token}</code>. The    email is sent using the sendMail function.</li> <li>Response: If the email is sent successfully, the API returns a 200 OK response. If the email does not exist in    the    database, a 500 Internal Server Error response is returned.</li> </ol>"},{"location":"api/#authgetpublicprofileapi","title":"<code>auth.GetPublicProfileAPI</code>","text":"<p>This API endpoint is responsible for retrieving the public profile of a user. It receives a JSON object in the request body containing the user's _id, username, or email.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/auth/GetPublicProfileAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"user_id\",\n   \"username\": \"user_username\",\n   \"email\": \"user@example.com\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the user whose public profile is being requested.</li> <li><code>username</code> (string): The username of the user whose public profile is being requested.</li> <li><code>email</code> (string): The email address of the user whose public profile is being requested.</li> </ul> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the public profile of the user.</p> <ul> <li>Status Code 200: Public profile retrieved successfully. The response body contains the public profile of the user.</li> <li>Status Code 404: Not Found. The user does not exist.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Body Extraction: The _id, username, and email are extracted from the request body.</li> <li>Public Profile Retrieval: The <code>DatabaseAccount.getPublicProfile</code> function is called with the extracted _id,    username, and email to retrieve the public profile of the user.</li> <li>Response: If the public profile is retrieved successfully, the API returns a 200 OK response with the public    profile in the response body. If the user does not exist, a 404 Not Found response is returned.</li> </ol>"},{"location":"api/#authoauthapi","title":"<code>auth.OAuthAPI</code>","text":"<p>This API endpoint is responsible for handling Google OAuth2.0 requests for user authentication. It receives a code from Google's OAuth2.0 server, which is then exchanged for an access token. The access token is used to fetch the user's details from Google's server.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/auth/OAuthAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>OAuth2.0 Request Reception: The API receives a request from Google's OAuth2.0 server containing a code.</li> <li>Access Token Generation: The code is exchanged for an access token using Google's OAuth2.0 client.</li> <li>User Details Fetching: The access token is used to fetch the user's details from Google's server.</li> <li>User Existence Check: The API checks if the user already exists in the database.</li> <li>Existing User Handling: If the user exists, their Google ID is updated (if necessary), a session token is    generated, and the user is redirected to the dashboard.</li> <li>New User Handling: If the user does not exist, a new user object is created and inserted into the database. The    user's profile picture is downloaded and uploaded to Supabase Storage. The profile picture URL is updated in the    database. An encrypted ID is generated and the user is redirected to the Google sign-in page.</li> </ol> <p>Response</p> <p>The API does not directly respond with a status code and body. Instead, it redirects the user to the appropriate page based on whether the user exists in the database or not.</p> <ul> <li>Redirect to Dashboard: If the user exists in the database, a session token is set in the cookies and the user is   redirected to the dashboard.</li> <li>Redirect to Google Sign-In: If the user does not exist in the database, an encrypted ID is set in the cookies and the   user is redirected to the Google sign-in page.</li> </ul>"},{"location":"api/#authretrievecacheapi","title":"<code>auth.RetrieveCacheAPI</code>","text":"<p>This API endpoint is responsible for retrieving the cache data of a user. It receives a JSON object in the request body containing the user's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/auth/RetrieveCacheAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"user_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the user whose cache data is being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Cache Data Retrieval: The <code>DatabaseAccount.getUserCache</code> function is called with the extracted _id to retrieve    the cache data of the user.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the cache data of the user.</p> <ul> <li>Status Code 200: Cache data retrieved successfully. The response body contains the cache data of the user.</li> <li>Status Code 404: Not Found. The user does not exist or there is no cache data for the user.</li> </ul>"},{"location":"api/#authsigninapi","title":"<code>auth.SignInAPI</code>","text":"<p>This API endpoint is responsible for authenticating users. It receives a JSON object in the request body containing the user's key (username or email) and password.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/auth/SignInAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"key\": \"user_key\",\n   \"password\": \"user_password\"\n}\n</code></pre> <ul> <li><code>key</code> (string): The username or email of the user trying to authenticate.</li> <li><code>password</code> (string): The password of the user trying to authenticate.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Body Extraction: The key and password are extracted from the request body.</li> <li>User Retrieval: The <code>DatabaseAccount.getUserAccount</code> function is called with the extracted key to retrieve the    user's account.</li> <li>Password Verification: The provided password is compared with the stored password hash using the <code>bcrypt.compare</code>    function.</li> <li>Token Generation and Response: If the password is correct, a session token is generated using the <code>generateToken</code>    function. The token is set in the cookies and the user's details are returned in the response body.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the user's details if the authentication is successful.</p> <ul> <li>Status Code 200: Authentication successful. The response body contains the user's details and a session token is set   in the cookies.</li> <li>Status Code 401: Unauthorized. The provided key or password is incorrect.</li> <li>Status Code 404: Not Found. The user does not exist.</li> </ul>"},{"location":"api/#eventsgetalleventsapi","title":"<code>events.GetAllEventsAPI</code>","text":"<p>This API endpoint is responsible for retrieving all events. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/events/GetAllEventsAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Events Retrieval: The <code>DatabaseEvent.getAllEvents</code> function is called to retrieve all events.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing all events.</p> <ul> <li>Status Code 200: All events retrieved successfully. The response body contains a JSON array of all events.</li> <li>Status Code 404: Not Found. There are no events in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#eventsgetlatesteventapi","title":"<code>events.GetLatestEventAPI</code>","text":"<p>This API endpoint is responsible for retrieving the latest event. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/GetLatestEventAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Latest Event Retrieval: The <code>DatabaseEvent.getLatestEvent</code> function is called to retrieve the latest event.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the latest event.</p> <ul> <li>Status Code 200: Latest event retrieved successfully. The response body contains the latest event.</li> <li>Status Code 404: Not Found. There are no events in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#eventsgetoneeventapi","title":"<code>events.GetOneEventAPI</code>","text":"<p>This API endpoint is responsible for retrieving a specific event. It receives a JSON object in the request body containing the event's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/GetOneEventAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"event_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the event being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Event Retrieval: The <code>DatabaseEvent.getOneEvent</code> function is called with the extracted _id to retrieve the    specific event.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the event.</p> <ul> <li>Status Code 200: Event retrieved successfully. The response body contains the event.</li> <li>Status Code 404: Not Found. The event does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#eventsregistereventapi","title":"<code>events.RegisterEventAPI</code>","text":"<p>This API endpoint is responsible for registering an event. It receives a JSON object in the request body containing the event's _id and the farm_id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/RegisterEventAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"event_id\": \"event_id\",\n   \"farm_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>event_id</code> (string): The unique identifier of the event being registered.</li> <li><code>farm_id</code> (string): The unique identifier of the farm where the event is being registered.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The event_id and farm_id are extracted from the request body.</li> <li>Event Registration: The <code>DatabaseEvent.updateOneEvent</code> function is called with the extracted event_id and farm_id    to register the event.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the registered event.</p> <ul> <li>Status Code 200: Event registered successfully. The response body contains the registered event.</li> <li>Status Code 404: Not Found. The event does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetfarmsapi","title":"<code>farms.GetFarmsAPI</code>","text":"<p>This API endpoint is responsible for retrieving all farms. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/farms/GetFarmsAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Farms Retrieval: The <code>DatabaseFarm.getAllFarms</code> function is called to retrieve all farms.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing all farms.</p> <ul> <li>Status Code 200: All farms retrieved successfully. The response body contains a JSON array of all farms.</li> <li>Status Code 404: Not Found. There are no farms in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetallvetapi","title":"<code>farms.GetAllVetAPI</code>","text":"<p>This API endpoint is responsible for retrieving all vets. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/GetAllVetAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Vets Retrieval: The <code>DatabaseForum.getAllVets</code> function is called to retrieve all vets.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing all vets.</p> <ul> <li>Status Code 200: All vets retrieved successfully. The response body contains a JSON array of all vets.</li> <li>Status Code 404: Not Found. There are no vets in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgethealthtrackapi","title":"<code>farms.GetHealthTrackAPI</code>","text":"<p>This API endpoint is responsible for retrieving all health track records. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/farms/GetHealthTrackAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Health Track Retrieval: The <code>Database.getHealthTrack</code> function is called to retrieve all health track records.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing all health track records.</p> <ul> <li>Status Code 200: All health track records retrieved successfully. The response body contains a JSON array of all   health track records.</li> <li>Status Code 404: Not Found. There are no health track records in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsaddproductapi","title":"<code>farms.AddProductAPI</code>","text":"<p>This API endpoint is responsible for adding a product to a farm. It receives a JSON object in the request body containing the product details and the farm's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/AddProductAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"product\": {\n      \"name\": \"product_name\",\n      \"description\": \"product_description\",\n      \"price\": \"product_price\"\n   },\n   \"farm_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>product</code> (object): The product details to be added.</li> <li><code>name</code> (string): The name of the product.</li> <li><code>description</code> (string): The description of the product.</li> <li><code>price</code> (string): The price of the product.</li> <li><code>farm_id</code> (string): The unique identifier of the farm where the product is being added.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The product and farm_id are extracted from the request body.</li> <li>Product Addition: The <code>DatabaseFarm.addProduct</code> function is called with the extracted product and farm_id to add    the product to the farm.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the added product.</p> <ul> <li>Status Code 200: Product added successfully. The response body contains the added product.</li> <li>Status Code 404: Not Found. The farm does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetcategoryproductsapi","title":"<code>farms.GetCategoryProductsAPI</code>","text":"<p>This API endpoint is responsible for retrieving products of a specific category from a farm. It receives a JSON object in the request body containing the product category and the farm's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetCategoryProductsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"product_category\": \"product_category\",\n   \"farm_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>product_category</code> (string): The category of the products being requested.</li> <li><code>farm_id</code> (string): The unique identifier of the farm from where the products are being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The product_category and farm_id are extracted from the request body.</li> <li>Product Retrieval: The <code>DatabaseFarm.getCategoryProduct</code> function is called with the extracted product_category    and farm_id to retrieve the specific products.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the products.</p> <ul> <li>Status Code 200: Products retrieved successfully. The response body contains the products.</li> <li>Status Code 404: Not Found. The products do not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetinstallmentsapi","title":"<code>farms.GetInstallmentsAPI</code>","text":"<p>This API endpoint is responsible for retrieving all installments of a user. It receives a JSON object in the request body containing the user's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetInstallmentsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"user_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the user whose installments are being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Installments Retrieval: The <code>DatabaseFarm.getInstallments</code> function is called with the extracted _id to retrieve    the installments of the user.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the installments.</p> <ul> <li>Status Code 200: Installments retrieved successfully. The response body contains the installments.</li> <li>Status Code 404: Not Found. The user does not exist or there are no installments for the user.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetonefarmapi","title":"<code>farms.GetOneFarmAPI</code>","text":"<p>This API endpoint is responsible for retrieving a specific farm. It receives a JSON object in the request body containing the farm's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetOneFarmAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the farm being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Farm Retrieval: The <code>DatabaseFarm.getOneFarm</code> function is called with the extracted _id to retrieve the specific    farm.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the farm.</p> <ul> <li>Status Code 200: Farm retrieved successfully. The response body contains the farm.</li> <li>Status Code 404: Not Found. The farm does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetonefarmproductsapi","title":"<code>farms.GetOneFarmProductsAPI</code>","text":"<p>This API endpoint is responsible for retrieving all products of a specific farm. It receives a JSON object in the request body containing the farm's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetOneFarmProductsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the farm whose products are being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Product Retrieval: The <code>DatabaseFarm.getOneFarmProducts</code> function is called with the extracted _id to retrieve    the products of the specific farm.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the products.</p> <ul> <li>Status Code 200: Products retrieved successfully. The response body contains the products.</li> <li>Status Code 404: Not Found. The farm does not exist or there are no products for the farm.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetproductinfoapi","title":"<code>farms.GetProductInfoAPI</code>","text":"<p>This API endpoint is responsible for retrieving information about a specific product. It receives a JSON object in the request body containing the product's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetProductInfoAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"product_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the product whose information is being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Product Information Retrieval: The <code>DatabaseFarm.getOneProduct</code> function is called with the extracted _id to    retrieve the information of the specific product.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the product information.</p> <ul> <li>Status Code 200: Product information retrieved successfully. The response body contains the product information.</li> <li>Status Code 404: Not Found. The product does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsplaceorderapi","title":"<code>farms.PlaceOrderAPI</code>","text":"<p>This API endpoint is responsible for placing an order for a specific product from a farm. It receives a JSON object in the request body containing the product's _id, the quantity of the product, and the user's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/PlaceOrderAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"product_id\": \"product_id\",\n   \"quantity\": \"quantity\",\n   \"user_id\": \"user_id\"\n}\n</code></pre> <ul> <li><code>product_id</code> (string): The unique identifier of the product being ordered.</li> <li><code>quantity</code> (number): The quantity of the product being ordered.</li> <li><code>user_id</code> (string): The unique identifier of the user placing the order.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The product_id, quantity, and user_id are extracted from the request body.</li> <li>Order Placement: The <code>DatabaseFarm.placeOrder</code> function is called with the extracted product_id, quantity, and    user_id to place the order.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the order details.</p> <ul> <li>Status Code 200: Order placed successfully. The response body contains the order details.</li> <li>Status Code 404: Not Found. The product does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#farmsgetproductcatalogapi","title":"<code>farms.GetProductCatalogAPI</code>","text":"<p>This API endpoint is responsible for retrieving the product catalog of a specific farm. It receives a JSON object in the request body containing the farm's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/farms/GetProductCatalogAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"farm_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the farm whose product catalog is being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Product Catalog Retrieval: The <code>DatabaseFarm.getProductCatalog</code> function is called with the extracted _id to    retrieve the product catalog of the specific farm.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the product catalog.</p> <ul> <li>Status Code 200: Product catalog retrieved successfully. The response body contains the product catalog.</li> <li>Status Code 404: Not Found. The farm does not exist or there is no product catalog for the farm.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumgetallpostapi","title":"<code>forum.GetAllPostAPI</code>","text":"<p>This API endpoint is responsible for retrieving all posts. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/forum/GetAllPostAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Posts Retrieval: The <code>DatabaseForum.getAllPosts</code> function is called to retrieve all posts.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing all posts.</p> <ul> <li>Status Code 200: All posts retrieved successfully. The response body contains a JSON array of all posts.</li> <li>Status Code 404: Not Found. There are no posts in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumgetmostlikedpostsapi","title":"<code>forum.GetMostLikedPostsAPI</code>","text":"<p>This API endpoint is responsible for retrieving the most liked posts. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/forum/GetMostLikedPostsAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Most Liked Posts Retrieval: The <code>DatabaseForum.getMostLikedPosts</code> function is called to retrieve the most liked posts.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON array containing the most liked posts.</p> <ul> <li>Status Code 200: Most liked posts retrieved successfully. The response body contains a JSON array of the most liked posts.</li> <li>Status Code 404: Not Found. There are no posts in the database.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumgetonepostapi","title":"<code>forum.GetOnePostAPI</code>","text":"<p>This API endpoint is responsible for retrieving a specific post. It receives a JSON object in the request body containing the post's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/forum/GetOnePostAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"post_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the post being requested.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>Post Retrieval: The <code>DatabaseForum.getOnePost</code> function is called with the extracted _id to retrieve the specific post.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the post.</p> <ul> <li>Status Code 200: Post retrieved successfully. The response body contains the post.</li> <li>Status Code 404: Not Found. The post does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumincrementviewcountapi","title":"<code>forum.IncrementViewCountAPI</code>","text":"<p>This API endpoint is responsible for incrementing the view count of a specific post. It receives a JSON object in the request body containing the post's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/forum/IncrementViewCountAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"post_id\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the post whose view count is being incremented.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id is extracted from the request body.</li> <li>View Count Increment: The <code>DatabaseForum.incrementViewCount</code> function is called with the extracted _id to increment the view count of the specific post.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the success status.</p> <ul> <li>Status Code 200: View count incremented successfully. The response body contains the success status.</li> <li>Status Code 404: Not Found. The post does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#foruminsertpostapi","title":"<code>forum.InsertPostAPI</code>","text":"<p>This API endpoint is responsible for inserting a new post. It receives a JSON object in the request body containing the post details.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/forum/InsertPostAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"title\": \"post_title\",\n   \"content\": \"post_content\",\n   \"author\": \"post_author\"\n}\n</code></pre> <ul> <li><code>title</code> (string): The title of the post.</li> <li><code>content</code> (string): The content of the post.</li> <li><code>author</code> (string): The author of the post.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The post details are extracted from the request body.</li> <li>Post Insertion: The <code>DatabaseForum.insertPost</code> function is called with the extracted post details to insert the new post.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the success status.</p> <ul> <li>Status Code 200: Post inserted successfully. The response body contains the success status.</li> <li>Status Code 404: Not Found. The post could not be inserted.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumsendreplyapi","title":"<code>forum.SendReplyAPI</code>","text":"<p>This API endpoint is responsible for sending a reply to a specific post. It receives a JSON object in the request body containing the reply details.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/forum/SendReplyAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"post_id\": \"post_id\",\n   \"user_id\": \"user_id\",\n   \"content\": \"reply_content\"\n}\n</code></pre> <ul> <li><code>post_id</code> (string): The unique identifier of the post to which the reply is being sent.</li> <li><code>user_id</code> (string): The unique identifier of the user sending the reply.</li> <li><code>content</code> (string): The content of the reply.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The reply details are extracted from the request body.</li> <li>Reply Insertion: The <code>DatabaseForum.insertReplyInPost</code> function is called with the extracted reply details to insert the reply into the specific post.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the success status.</p> <ul> <li>Status Code 200: Reply sent successfully. The response body contains the success status.</li> <li>Status Code 404: Not Found. The post does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#forumupvotepostapi","title":"<code>forum.UpvotePostAPI</code>","text":"<p>This API endpoint is responsible for upvoting a specific post. It receives a JSON object in the request body containing the post's _id, the liker's _id, and a boolean indicating whether the liker has already liked the post.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/forum/UpvotePostAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"postObjectID\": \"post_id\",\n   \"likerObjectID\": \"liker_id\",\n   \"alreadyLiked\": \"already_liked\"\n}\n</code></pre> <ul> <li><code>postObjectID</code> (string): The unique identifier of the post being upvoted.</li> <li><code>likerObjectID</code> (string): The unique identifier of the user who is liking the post.</li> <li><code>alreadyLiked</code> (boolean): A boolean indicating whether the user has already liked the post.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The postObjectID, likerObjectID, and alreadyLiked are extracted from the request body.</li> <li>Post Upvoting: The <code>DatabaseForum.votePost</code> function is called with the extracted postObjectID, likerObjectID, and alreadyLiked to upvote the specific post.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the success status.</p> <ul> <li>Status Code 200: Post upvoted successfully. The response body contains the success status.</li> <li>Status Code 404: Not Found. The post does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#marketplacegetallproductsmarketapi","title":"<code>marketplace.GetAllProductsMarketAPI</code>","text":"<p>This API endpoint is responsible for retrieving all products from the marketplace. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/marketplace/GetAllProductsMarketAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Product Retrieval: The <code>DatabaseOthers.getAllProducts</code> function is called to retrieve all products from the    marketplace.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the products information.</p> <ul> <li>Status Code 200: Products retrieved successfully. The response body contains the products information.</li> <li>Status Code 404: Not Found. No products exist in the marketplace.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#newsgetallnewsapi","title":"<code>news.GetAllNewsAPI</code>","text":"<p>This API endpoint is responsible for retrieving all news. It does not require any request body.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>GET</code></li> <li>Endpoint: <code>/news/GetAllNewsAPI</code></li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>News Retrieval: The <code>DatabaseNews.getAllNews</code> function is called to retrieve all news.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the news information.</p> <ul> <li>Status Code 200: News retrieved successfully. The response body contains the news information.</li> <li>Status Code 404: Not Found. No news exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#newsgetonenewsapi","title":"<code>news.GetOneNewsAPI</code>","text":"<p>This API endpoint is responsible for retrieving a specific news item. It receives a JSON object in the request body containing the news item's _id and news_uid.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/news/GetOneNewsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"_id\": \"news_id\",\n   \"news_uid\": \"news_uid\"\n}\n</code></pre> <ul> <li><code>_id</code> (string): The unique identifier of the news item being retrieved.</li> <li><code>news_uid</code> (string): The unique user identifier associated with the news item.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The _id and news_uid are extracted from the request body.</li> <li>News Retrieval: The <code>DatabaseNews.getOneNews</code> function is called with the extracted _id and news_uid to retrieve    the specific news item.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the news information.</p> <ul> <li>Status Code 200: News retrieved successfully. The response body contains the news information.</li> <li>Status Code 404: Not Found. The news item does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#newssavenewsapi","title":"<code>news.saveNewsAPI</code>","text":"<p>This API endpoint is responsible for saving a news item. It receives a JSON object in the request body containing the news item's _id and the user's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/news/saveNewsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"news_id\": \"news_id\",\n   \"user_id\": \"user_id\"\n}\n</code></pre> <ul> <li><code>news_id</code> (string): The unique identifier of the news item being saved.</li> <li><code>user_id</code> (string): The unique identifier of the user who is saving the news item.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The news_id and user_id are extracted from the request body.</li> <li>News Saving: The <code>DatabaseNews.saveNews</code> function is called with the extracted user_id and news_id to save the    specific news item.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the success status.</p> <ul> <li>Status Code 200: News saved successfully. The response body contains the success status.</li> <li>Status Code 404: Not Found. The news item does not exist.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#miscgetnotificationapi","title":"<code>misc.GetNotificationAPI</code>","text":"<p>This API endpoint is responsible for retrieving notifications for a specific user. It receives a JSON object in the request body containing the user's username.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/API/v1/GetNotificationAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"username\": \"username\"\n}\n</code></pre> <ul> <li><code>username</code> (string): The unique identifier of the user whose notifications are being retrieved.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The username is extracted from the request body.</li> <li>Notification Retrieval: The <code>DatabaseOthers.getNotifications</code> function is called with the extracted username to    retrieve the notifications.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the notifications.</p> <ul> <li>Status Code 200: Notifications retrieved successfully. The response body contains the notifications.</li> <li>Status Code 404: Not Found. The user does not have any notifications.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#miscsaveditemsapi","title":"<code>misc.savedItemsAPI</code>","text":"<p>This API endpoint is responsible for retrieving saved items for a specific user. It receives a JSON object in the request body containing the user's _id.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/API/v1/savedItemsAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"user_id\": \"user_id\"\n}\n</code></pre> <ul> <li><code>user_id</code> (string): The unique identifier of the user whose saved items are being retrieved.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The user_id is extracted from the request body.</li> <li>Saved Items Retrieval: The <code>DatabaseOthers.getSavedItems</code> function is called with the extracted user_id to    retrieve the saved items.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the saved items.</p> <ul> <li>Status Code 200: Saved items retrieved successfully. The response body contains the saved items.</li> <li>Status Code 404: Not Found. The user does not have any saved items.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"api/#miscsearchallapi","title":"<code>misc.SearchAllAPI</code>","text":"<p>This API endpoint is responsible for searching all available data based on a query. It receives a JSON object in the request body containing the query.</p> <ul> <li>Version: <code>1.0</code></li> <li>Method: <code>POST</code></li> <li>Endpoint: <code>/API/v1/SearchAllAPI</code></li> </ul> <p>Request Body</p> <pre><code>{\n   \"query\": \"query\"\n}\n</code></pre> <ul> <li><code>query</code> (string): The search query.</li> </ul> <p>Processing Steps</p> <ol> <li>Request Verification: The API verifies the request using the <code>verifyRequest</code> function. If the request is not    verified, it returns a 401 Unauthorized response.</li> <li>Request Body Extraction: The query is extracted from the request body.</li> <li>Search: The <code>DatabaseOthers.getGlobalSearchResult</code> function is called with the extracted query to perform the    search.</li> </ol> <p>Response</p> <p>The API responds with an appropriate status code and a JSON object containing the search results.</p> <ul> <li>Status Code 200: Search completed successfully. The response body contains the search results.</li> <li>Status Code 404: Not Found. No results were found for the query.</li> <li>Status Code 401: Unauthorized. The request is not authorized.</li> </ul>"},{"location":"database/","title":"Database Documentation","text":"<p>This project uses MongoDB as the database. The database is hosted on MongoDB Atlas. Every API calls these database functions to perform CRUD operations. These functions are encapsulated within a dedicated data access layer, ensuring a clean separation of concerns and enhancing the maintainability of the codebase.</p>"},{"location":"database/#database-details","title":"Database Details","text":"<p>Database Name</p> <p>The database name is <code>Agri-Inn</code></p> <p>Collections</p> <p>The database contains the following collections:</p> Collection Name Documents Storage Size Description <code>animal-health-details</code> 17 20.48 KB Contains the details of the animal health <code>comment</code> 10 20.48 KB Contains the comments of a forum post <code>event</code> 5 20.48 KB Contains the details of the events <code>farm-info</code> 11 24.58 KB Contains the details of the farms <code>farm-products</code> 3 32.77 KB Contains all products of the farms <code>forum</code> 5 24.58 KB Contains the details of the forum <code>index</code> 7 20.48 KB Contains the search indexes <code>installment</code> 3 20.48 KB Contains the details of the installments <code>livestock-products</code> 17 28.67 KB Contains the details of the livestock products <code>marketplace</code> 33 24.58 KB Contains all products for sale <code>news</code> 4 24.58 KB Contains all the news information <code>notification</code> 3 20.48 KB Contains notification for each user <code>order</code> 8 20.48 KB Contains all the order(s) that have made <code>payment-info</code> 3 20.48 KB Contains all payment that have made <code>saved-item</code> 1 20.48 KB Contains the saved item for each user <code>user-account</code> 5 20.48 KB Contains all the account information <code>vets</code> 4 20.48 KB Contains all the vet information"},{"location":"database/#establishing-database-connection","title":"Establishing Database Connection","text":"<p>Developer Note: You should not need to worry about this section. This section is for the developers who are interested in the technical details of the project.</p> <p>The database connection is initiated once a user makes a request to the server.  Below is a step by step explanation of how the database connection is established.</p> <ol> <li> <p>MongoClient Instance: A <code>MongoClient</code> instance is created with the MongoDB server URL and some options. The server URL is fetched from the environment variable <code>MONGO_URL</code>.</p> <p>This <code>client</code> object is located in <code>Database.ts</code> file in the <code>src/lib/server</code> directory. This object is not exported so that it cannot be accessed from outside the file.</p> Database.ts<pre><code>const client: MongoClient = new MongoClient(MONGO_URL, {...});\n</code></pre> </li> <li> <p>Function that connects: The <code>initializeDatabaseConnection</code> function is defined. This function is responsible for establishing the connection to the MongoDB server and setting up the collections.</p> <p>This <code>initializeDatabaseConnection</code> function is located in <code>Database.ts</code> file in the <code>src/lib/server</code> directory. This function is exported so that it can be accessed from <code>hooks.server.ts</code> file.</p> <pre><code>export const initializeDatabaseConnection = async (): Promise&lt;void&gt; =&gt; {\n    try {\n        await client.connect();\n        databaseConnection = client.db(MONGO_DATABASE);\n\n        // Dynamically fetch all collections in the database\n        const collectionsList = await databaseConnection.listCollections().toArray();\n\n        // Create collections dynamically\n        for (const collectionInfo of collectionsList) {\n            collections[collectionInfo.name] = databaseConnection.collection(collectionInfo.name);\n        }\n    } catch (error: any) {}\n}\n</code></pre> </li> <li> <p>Establishing Connection: The <code>initializeDatabaseConnection</code> function is called in the <code>handle</code> function in the <code>src/hooks.server.ts</code> file. This function is a SvelteKit server function that handles incoming requests. If the database connection is not initialized, it calls the <code>initializeDatabaseConnection</code> function to establish the connection.     hooks.server.ts<pre><code>export const handle: Handle = async ({event, resolve}) =&gt; {\n    if (!isDatabaseConnectionInitialized()) await initializeDatabaseConnection();\n    return resolve(event);\n};\n</code></pre></p> </li> </ol> <p>So, the database connection is initiated when the first request comes in and the <code>handle</code> function is called.</p>"},{"location":"database/#forming-the-database-system","title":"Forming the Database System","text":"<p>The database system is an Object-Oriented system. It contains the following classes:</p> <ul> <li> <p>Base Class - <code>Database</code> in <code>Database.ts</code> file in the <code>src/lib/server</code> directory. This class contains only one attribute <code>collections</code>.</p> </li> <li> <p>Child Classes: Each child class contains functionality for each feature.</p> <ul> <li><code>DatabaseAccount</code> in <code>DatabaseAccount.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the <code>user-accounts</code> feature.</li> <li><code>DatabaseEvent</code> in <code>DatabaseEvent.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the <code>events</code> feature.</li> <li><code>DatabaseFarm</code> in <code>DatabaseFarm.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the <code>farms</code> feature.</li> <li><code>DatabaseForum</code> in <code>DatabaseForum.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the <code>forum</code> feature.</li> <li><code>DatabaseNews</code> in <code>DatabaseNews.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the <code>news</code> feature.</li> <li><code>DatabaseOthers</code> in <code>DatabaseOthers.ts</code> file in the <code>src/lib/server/databaseObjects</code> directory. This class contains functionality for the all others feature.</li> </ul> </li> </ul> <p>Developer Note: Every class uses <code>collection</code> object from parent class to execute queries and communicate with database</p>"},{"location":"database/#databasets-file","title":"<code>Database.ts</code> File","text":"<p>The <code>Database.ts</code> file is a typescript file that sets up and manages the connection to a MongoDB database for the application. Here's a breakdown of its contents:</p> <ol> <li> <p><code>initializeDatabaseConnection</code> Function: This asynchronous function is responsible for establishing the connection to the MongoDB server and setting up the collections. It connects to the MongoDB server using the <code>MongoClient</code> instance, fetches all collections in the database, and creates collections dynamically.</p> </li> <li> <p><code>isDatabaseConnectionInitialized</code> Function: This function checks whether the database connection has been initialized. It returns <code>true</code> if the database connection is initialized, <code>false</code> otherwise.</p> </li> <li> <p><code>Database</code> Class: This class is used for interacting with the database. It has a static <code>collections</code> property that refers to the <code>collections</code> object declared earlier.</p> </li> </ol> <p>This file is crucial for the application as it sets up the database connection and provides a way to interact with the database.</p>"},{"location":"database/#database-class","title":"<code>Database</code> class","text":"<p>The <code>Database</code> class in the <code>Database.ts</code> file is a base class that provides a common interface for interacting with the MongoDB database. It is designed to be extended by other classes that need to perform database operations.</p> <p>Here's a breakdown of the <code>Database</code> class:</p> Database.ts<pre><code>export default class Database {\n    protected static collections = collections;\n}\n</code></pre> <p><code>collections</code>: This is a static property that holds a reference to the <code>collections</code> object. This object is populated with the collections in the MongoDB database when the <code>initializeDatabaseConnection</code> function is called. Each key in the <code>collections</code> object is the name of a collection, and the corresponding value is the MongoDB collection object that can be used to perform operations on that collection.</p> <p>Developers Note: The <code>Database</code> class is extended by other classes in the <code>databaseObjects</code> directory. These classes use the <code>collections</code> property of the <code>Database</code> class to perform operations on the MongoDB collections. </p>"},{"location":"database/#databaseaccountts-file","title":"<code>DatabaseAccount.ts</code> File","text":"<p>This file contains the <code>DatabaseAccount</code> class that is used for interacting with the <code>user-account</code> collection in the MongoDB database. It extends the <code>Database</code> class and provides methods for performing CRUD operations on the <code>user-account</code> collection.</p>"},{"location":"database/#databaseaccount-class","title":"<code>DatabaseAccount</code> class","text":"<p>The <code>DatabaseAccount</code> class in the <code>DatabaseAccount.ts</code> file extends the <code>Database</code> class and provides methods for performing CRUD operations on the <code>user-account</code> collection.</p> <p>Here's a breakdown of the <code>DatabaseAccount</code> class:</p> DatabaseAccount.ts<pre><code>export default class DatabaseAccount extends Database {\n    // Methods for performing CRUD operations on the `user-account` collection\n}\n</code></pre> <p>This class contains methods for performing CRUD operations on the <code>user-account</code> collection. Each method is documented with JSDoc comments.</p> <p>Methods for performing CRUD operations on the <code>user-account</code> collection:</p> Method Name Parameters Return Type <code>getUserAccount()</code> <code>_id</code>: ObjectId, <code>username</code>: string, <code>email</code>: string <code>Promise&lt;any&gt;</code> <code>getUserCache ()</code> <code>_id</code>: ObjectId <code>Promise&lt;TypeUserCache&gt;</code> <code>getUserCredentialsByObjectID()</code> <code>_id</code>: ObjectId <code>Promise&lt;any&gt;</code> <code>insertResetPasswordToken()</code> <code>email</code>: string, <code>token</code>: string <code>Promise&lt;boolean&gt;</code> <code>getResetPasswordToken()</code> <code>token</code>: string <code>Promise&lt;any&gt;</code> <code>deleteResetPasswordToken()</code> <code>_id</code>: ObjectId <code>Promise&lt;boolean&gt;</code> <code>updatePassword()</code> <code>_id</code>: ObjectId, <code>password</code>: string <code>Promise&lt;boolean&gt;</code> <code>updateGoogleID()</code> <code>email</code>: string, <code>google_id</code>: string <code>Promise&lt;boolean&gt;</code> <code>insertUser()</code> <code>userObject</code>: UserObject <code>Promise&lt;any&gt;</code> <code>completeGoogleSignUp()</code> <code>_id</code>: ObjectId, <code>username</code>: string, <code>password_hash</code>: string <code>Promise&lt;boolean&gt;</code> <code>updateProfilePicture()</code> <code>_id</code>: ObjectId, <code>profile_picture</code>: string <code>Promise&lt;boolean&gt;</code> <code>crosscheckUsernameAndObjectI()</code> <code>username</code>: string, <code>_id</code>: ObjectId <code>Promise&lt;boolean&gt;</code> <code>getPublicProfile()</code> <code>_id</code>: ObjectId, <code>username</code>: string, <code>email</code>: string <code>Promise&lt;PublicProfile&gt;</code> <p>Below is a detailed description of each method:</p>"},{"location":"database/#getuseraccount","title":"getUserAccount()","text":"<p>Definition:</p> <pre><code>getUserAccount(\n    _id?: ObjectId | null, \n    username?: string | null, \n    email?: string | null)\n: Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves a user account from the database based on specified criteria.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId | null, optional): The unique identifier of the user account.</li> <li><code>username</code> (string | null, optional): The username of the user account.</li> <li><code>email</code> (string | null, optional): The email address associated with the user account.</li> </ul> <p>Returns: A Promise that resolves to the user account if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified criteria to search for a user account in the \"user-account\" collection of the database. If the user account is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p> <p>Here's the documentation for the <code>getUserCache()</code> method in the <code>DatabaseAccount</code> class:</p>"},{"location":"database/#getusercache","title":"getUserCache()","text":"<p>Definition:</p> <pre><code>getUserCache(_id: ObjectId): Promise&lt;TypeUserCache | undefined&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves cached user information from the database by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> </ul> <p>Returns: A Promise that resolves to a TypeUserCache object if found, or undefined if not found.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getusercredentialsbyobjectid","title":"getUserCredentialsByObjectID()","text":"<p>Definition:</p> <pre><code>getUserCredentialsByObjectID(_id: ObjectId): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves user credentials from the database by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> </ul> <p>Returns: A Promise that resolves to a Credentials object.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#insertresetpasswordtoken","title":"insertResetPasswordToken()","text":"<p>Definition:</p> <pre><code>insertResetPasswordToken(email: string, token: string): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method inserts a reset password token for a user by their email.</p> <p>Parameters:</p> <ul> <li><code>email</code> (string): The email of the user for whom the reset token is inserted.</li> <li><code>token</code> (string): The reset password token to be inserted.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the reset token insertion was successful.</p> <p>Usage:</p> <p>This method uses the specified email to search for a user account in the \"user-account\" collection of the database. If the user account is found, it inserts the provided reset password token into the user's account and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getresetpasswordtoken","title":"getResetPasswordToken()","text":"<p>Definition:</p> <pre><code>getResetPasswordToken(token: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves a reset password token for a user from the database.</p> <p>Parameters:</p> <ul> <li><code>token</code> (string): The reset password token.</li> </ul> <p>Returns: A Promise that resolves to an object containing the user's <code>_id</code> and a <code>success</code> boolean if the reset password token is found, or an object with <code>success</code> set to <code>false</code> if not found.</p> <p>Usage:</p> <p>This method uses the specified token to search for a user account in the \"user-account\" collection of the database. If the user account is found, it returns an object containing the user's <code>_id</code> and a <code>success</code> boolean set to <code>true</code>; otherwise, it returns an object with <code>success</code> set to <code>false</code>.</p> <p>Here's the table entry for the <code>getResetPasswordToken()</code> method:</p>"},{"location":"database/#deleteresetpasswordtoken","title":"deleteResetPasswordToken()","text":"<p>Definition:</p> <pre><code>deleteResetPasswordToken(_id: ObjectId): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method deletes a reset password token for a user by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the reset token deletion was successful.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it deletes the reset password token from the user's account and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#updatepassword","title":"updatePassword()","text":"<p>Definition:</p> <pre><code>updatePassword(\n    _id: ObjectId, \n    password: string)\n: Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method updates the password for a user in the database by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> <li><code>password</code> (string): The new password for the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the password update was successful.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it updates the user's password and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#updategoogleid","title":"updateGoogleID()","text":"<p>Definition:</p> <pre><code>updateGoogleID(email: string, google_id: string): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method updates the Google ID for a user in the database by their email.</p> <p>Parameters:</p> <ul> <li><code>email</code> (string): The email of the user for whom the Google ID is updated.</li> <li><code>google_id</code> (string): The new Google ID for the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the Google ID update was successful.</p> <p>Usage:</p> <p>This method uses the specified email to search for a user account in the \"user-account\" collection of the database. If the user account is found, it updates the user's Google ID and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#insertuser","title":"insertUser()","text":"<p>Definition:</p> <pre><code>insertUser(userObject: UserObject): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method inserts a new user account into the database.</p> <p>Parameters:</p> <ul> <li><code>userObject</code> (UserObject): The user account object to be inserted.</li> </ul> <p>Returns: A Promise that resolves to the result of the insertion operation.</p> <p>Usage:</p> <p>This method uses the provided <code>userObject</code> to insert a new user account into the \"user-account\" collection of the database. If the insertion is successful, it logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#completegooglesignup","title":"completeGoogleSignUp()","text":"<p>Definition:</p> <pre><code>completeGoogleSignUp(_id: ObjectId, username: string, password_hash: string): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method completes the Google sign-up process for a user in the database by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> <li><code>username</code> (string): The username for the user account.</li> <li><code>password_hash</code> (string): The hashed password for the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the Google sign-up process was completed successfully.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it updates the user's username and password hash and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#updateprofilepicture","title":"updateProfilePicture()","text":"<p>Definition:</p> <pre><code>updateProfilePicture(_id: ObjectId, profile_picture: string): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method updates the profile picture for a user in the database by their unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> <li><code>profile_picture</code> (string): The new profile picture for the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the profile picture update was successful.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found, it updates the user's profile picture and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#crosscheckusernameandobjectid","title":"crosscheckUsernameAndObjectID()","text":"<p>Definition:</p> <pre><code>crosscheckUsernameAndObjectID(username: string, _id: ObjectId): Promise&lt;boolean&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method crosschecks a username and ObjectID to ensure they match in the database.</p> <p>Parameters:</p> <ul> <li><code>username</code> (string): The username of the user account.</li> <li><code>_id</code> (ObjectId): The unique identifier of the user account.</li> </ul> <p>Returns: A Promise that resolves to a boolean indicating whether the username and ObjectID match.</p> <p>Usage:</p> <p>This method uses the specified username and ObjectID to search for a user account in the \"user-account\" collection of the database. If the user account is found and the username and ObjectID match, it logs a &lt;200&gt; status and returns <code>true</code>; otherwise, it logs a &lt;404&gt; status and returns <code>false</code>.</p>"},{"location":"database/#getpublicprofile","title":"getPublicProfile()","text":"<p>Definition:</p> <pre><code>getPublicProfile(\n    _id?: ObjectId | null, \n    username?: string, \n    email?: string)\n: Promise&lt;PublicProfile | null&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves public profile information for a user from the database based on specified criteria.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId | null, optional): The unique identifier of the user account.</li> <li><code>username</code> (string, optional): The username of the user account.</li> <li><code>email</code> (string, optional): The email address associated with the user account.</li> </ul> <p>Returns: A Promise that resolves to a PublicProfile object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified criteria to search for a user account in the \"user-account\" collection of the database. If the user account is found, it returns a PublicProfile object containing the user's full name, username, email, gender, phone number, occupation, social connections, and profile picture. If the user account is not found, it logs a &lt;404&gt; status and returns null.</p>"},{"location":"database/#databaseeventts-file","title":"<code>DatabaseEvent.ts</code> File","text":"<p>This file contains the <code>DatabaseEvent</code> class that is used for interacting with the <code>event</code> collection in the MongoDB database. It extends the <code>Database</code> class and provides methods for performing CRUD operations on the <code>event</code> collection.</p>"},{"location":"database/#databaseevent-class","title":"<code>DatabaseEvent</code> class","text":"<p>The <code>DatabaseEvent</code> class in the <code>DatabaseEvent.ts</code> file extends the <code>Database</code> class and provides methods for performing CRUD operations on the <code>event</code> collection.</p> <p>Here's a breakdown of the <code>DatabaseAccount</code> class:</p> DatabaseAccount.ts<pre><code>export default class DatabaseAccount extends Database {\n    // Methods for performing CRUD operations on the `user-account` collection\n}\n</code></pre> <p>This class contains methods for performing CRUD operations on the <code>user-account</code> collection. Each method is documented with JSDoc comments.</p> <p>Methods for performing CRUD operations on the <code>user-account</code> collection:</p> Method Name Parameters Return Type <code>getAllEvents()</code> None <code>Promise&lt;any&gt;</code> <code>getOneEvent()</code> <code>_id</code>: ObjectId <code>Promise&lt;any&gt;</code> <code>updateOneEvent()</code> <code>_id</code>: ObjectId, <code>farm_id</code>: any <code>Promise&lt;any&gt;</code> <code>getLatestEvent()</code> None <code>Promise&lt;any&gt;</code> <p>Below is a detailed description of each method:</p>"},{"location":"database/#getallevents","title":"getAllEvents()","text":"<p>Definition:</p> <pre><code>getAllEvents(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all event information from the database.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to an array of all event information objects.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"event\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then converts the result to an array with the <code>toArray()</code> method and returns this array.</p>"},{"location":"database/#getoneevent","title":"getOneEvent()","text":"<p>Definition:</p> <pre><code>getOneEvent(_id: ObjectId): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves a single event from the database by its unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the event.</li> </ul> <p>Returns: A Promise that resolves to the event information object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for an event in the \"event\" collection of the database. If the event is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#updateoneevent","title":"updateOneEvent()","text":"<p>Definition:</p> <pre><code>updateOneEvent(_id: ObjectId, farm_id: any): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method updates a specific event in the database by its unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>_id</code> (ObjectId): The unique identifier of the event.</li> <li><code>farm_id</code> (any): The farm identifier to be added to the event's registered farms.</li> </ul> <p>Returns: A Promise that resolves to the result of the update operation.</p> <p>Usage:</p> <p>This method uses the specified ObjectID to search for an event in the \"event\" collection of the database. If the event is found, it updates the event's registered farms by adding the provided <code>farm_id</code> and logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getlatestevent","title":"getLatestEvent()","text":"<p>Definition:</p> <pre><code>getLatestEvent(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves the latest event from the database.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to the latest event information object.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"event\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then sorts the results in descending order by the <code>event_date</code> field and limits the results to the most recent one. The method returns this latest event information object.</p> Method Name Parameters Return Type <code>getAllFarms()</code> None <code>Promise&lt;any&gt;</code> <code>getOneFarm()</code> <code>farm_uid</code>: string <code>Promise&lt;any&gt;</code> <code>getOneFarmProducts()</code> <code>farm_uid</code>: string <code>Promise&lt;any&gt;</code> <code>getOneProduct()</code> <code>product_id</code>: string <code>Promise&lt;any&gt;</code> <code>placeOrder()</code> <code>order</code>: PaymentObject <code>Promise&lt;any&gt;</code> <code>getInstallments()</code> <code>user_id</code>: string <code>Promise&lt;any&gt;</code> <code>getSellingProductCatalog()</code> <code>owner_uid</code>: string <code>Promise&lt;any&gt;</code> <code>getCategoryProduct()</code> <code>category</code>: string, <code>farm_id</code>: string <code>Promise&lt;any&gt;</code> <code>addProduct()</code> <code>newProductObject</code>: any, <code>uid</code>: string <code>Promise&lt;any&gt;</code>"},{"location":"database/#getallfarms","title":"getAllFarms()","text":"<p>Definition:</p> <pre><code>getAllFarms(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about all farms from the database.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to an array of all farm information objects.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"farm-info\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then converts the result to an array with the <code>toArray()</code> method and returns this array.</p>"},{"location":"database/#getonefarm","title":"getOneFarm()","text":"<p>Definition:</p> <pre><code>getOneFarm(farm_uid: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about a single farm by its unique identifier (UID) from the database.</p> <p>Parameters:</p> <ul> <li><code>farm_uid</code> (string): The unique identifier (UID) of the farm.</li> </ul> <p>Returns: A Promise that resolves to the farm information object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified <code>farm_uid</code> to search for a farm in the \"farm-info\" collection of the database. If the farm is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getonefarmproducts","title":"getOneFarmProducts()","text":"<p>Definition:</p> <pre><code>getOneFarmProducts(farm_uid: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about farm products associated with a single farm by its unique identifier (UID) from the database.</p> <p>Parameters:</p> <ul> <li><code>farm_uid</code> (string): The unique identifier (UID) of the farm to retrieve product information for.</li> </ul> <p>Returns: A Promise that resolves to the farm products information object or null if not found.</p> <p>Usage:</p> <p>This method uses the specified <code>farm_uid</code> to search for a farm in the \"farm-products\" collection of the database. If the farm is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getoneproduct","title":"getOneProduct()","text":"<p>Definition:</p> <pre><code>getOneProduct(product_id: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about a single product by its unique identifier (ID) from the database.</p> <p>Parameters:</p> <ul> <li><code>product_id</code> (string): The unique identifier (ID) of the product to retrieve information for.</li> </ul> <p>Returns: A Promise that resolves to the product information object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified <code>product_id</code> to search for a product in the \"farm-products\" collection of the database. It first finds the document where the product is located, then iterates over the products array in the document to find the product with the matching ID. If the product is found, it is returned; otherwise, null is returned.</p>"},{"location":"database/#placeorder","title":"placeOrder()","text":"<p>Definition:</p> <pre><code>placeOrder(order: PaymentObject): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method places an order by inserting the order details into the database.</p> <p>Parameters:</p> <ul> <li><code>order</code> (PaymentObject): The order details to be inserted.</li> </ul> <p>Returns: A Promise that resolves to the result of the insertion operation.</p> <p>Usage:</p> <p>This method uses the provided <code>order</code> object to insert a new order into the \"order\" collection of the database. If the insertion is successful, it logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getinstallments","title":"getInstallments()","text":"<p>Definition:</p> <pre><code>getInstallments(user_id: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all installment information for a specific user from the database.</p> <p>Parameters:</p> <ul> <li><code>user_id</code> (string): The unique identifier (ID) of the user to retrieve installment information for.</li> </ul> <p>Returns: A Promise that resolves to an array of installment information objects for the specified user.</p> <p>Usage:</p> <p>This method uses the specified <code>user_id</code> to search for installments in the \"order\" collection of the database. It finds all documents where the <code>user_id</code> field matches the provided <code>user_id</code>. It then iterates over the resulting array of installments and removes any installments that do not have a <code>total_installment</code> field. The method returns the filtered array of installments.</p>"},{"location":"database/#getsellingproductcatalog","title":"getSellingProductCatalog()","text":"<p>Definition:</p> <pre><code>getSellingProductCatalog(owner_uid: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves the product catalog for a specific farm owner from the database.</p> <p>Parameters:</p> <ul> <li><code>owner_uid</code> (string): The unique identifier (UID) of the farm owner.</li> </ul> <p>Returns: A Promise that resolves to the product catalog information object for the specified farm owner.</p> <p>Usage:</p> <p>This method uses the specified <code>owner_uid</code> to search for a farm in the \"farm-info\" collection of the database. If the farm is found, it returns the product catalog associated with the farm owner.</p>"},{"location":"database/#getcategoryproduct","title":"getCategoryProduct()","text":"<p>Definition:</p> <pre><code>getCategoryProduct(category: string, farm_id: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves products from a specific category for a specific farm from the database.</p> <p>Parameters:</p> <ul> <li><code>category</code> (string): The category of the products to retrieve.</li> <li><code>farm_id</code> (string): The unique identifier (ID) of the farm to retrieve products for.</li> </ul> <p>Returns: A Promise that resolves to an array of product information objects that match the specified category and farm ID.</p> <p>Usage:</p> <p>This method uses the specified <code>category</code> and <code>farm_id</code> to search for products in the \"livestock-products\" collection of the database. It finds all documents where the <code>category</code> and <code>farm_id</code> fields match the provided values. The method returns an array of these matching product information objects.</p>"},{"location":"database/#addproduct","title":"addProduct()","text":"<p>Definition:</p> <pre><code>addProduct(newProductObject: any, uid: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method adds a new product to a specific farm in the database.</p> <p>Parameters:</p> <ul> <li><code>newProductObject</code> (any): The new product object to be added.</li> <li><code>uid</code> (string): The unique identifier (UID) of the farm to add the product to.</li> </ul> <p>Returns: A Promise that resolves to the result of the insertion operation.</p> <p>Usage:</p> <p>This method uses the provided <code>newProductObject</code> and <code>uid</code> to insert a new product into the \"farm_products\" collection of the database. If the insertion is successful, it logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p> Method Name Parameters Return Type <code>getOnePost()</code> <code>post_uid</code>: ObjectId <code>Promise&lt;any&gt;</code> <code>getAllPosts()</code> None <code>Promise&lt;any&gt;</code> <code>getMostLikedPosts()</code> None <code>Promise&lt;any&gt;</code> <code>insertReplyInPost()</code> <code>reply</code>: any <code>Promise&lt;any&gt;</code> <code>votePost()</code> <code>postObjectID</code>: ObjectId, <code>likerObjectID</code>: string, <code>alreadyLiked</code>: boolean <code>Promise&lt;any&gt;</code>"},{"location":"database/#getonepost","title":"getOnePost()","text":"<p>Definition:</p> <pre><code>getOnePost(post_uid: ObjectId): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about a single post from the forum by its unique ObjectID.</p> <p>Parameters:</p> <ul> <li><code>post_uid</code> (ObjectId): The unique identifier (ObjectID) of the post to retrieve information for.</li> </ul> <p>Returns: A Promise that resolves to the post information object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified <code>post_uid</code> to search for a post in the \"forum\" collection of the database. If the post is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#getallposts","title":"getAllPosts()","text":"<p>Definition:</p> <pre><code>getAllPosts(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all posts from the forum.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to an array of all post information objects.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"forum\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then converts the result to an array with the <code>toArray()</code> method and returns this array.</p>"},{"location":"database/#getmostlikedposts","title":"getMostLikedPosts()","text":"<p>Definition:</p> <pre><code>getMostLikedPosts(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about the most liked posts from the forum.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to an array of the most liked post information objects.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"forum\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then sorts the results in descending order by the <code>like</code> field and limits the results to the top three. The method returns this array of the most liked post information objects.</p>"},{"location":"database/#insertreplyinpost","title":"insertReplyInPost()","text":"<p>Definition:</p> <pre><code>insertReplyInPost(reply: any): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method inserts a reply into a post in the comment section of the forum.</p> <p>Parameters:</p> <ul> <li><code>reply</code> (any): The reply to be inserted.</li> </ul> <p>Returns: A Promise that resolves to the result of the insertion operation.</p> <p>Usage:</p> <p>This method uses the provided <code>reply</code> object to insert a new reply into the \"comment\" collection of the database. If the insertion is successful, it logs a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#votepost","title":"votePost()","text":"<p>Definition:</p> <pre><code>votePost(postObjectID: ObjectId, likerObjectID: string, alreadyLiked: boolean): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method handles the voting (liking) of a post in the forum. If a user has already liked a post, their like is removed. If they haven't liked the post yet, their like is added.</p> <p>Parameters:</p> <ul> <li><code>postObjectID</code> (ObjectId): The unique identifier (ObjectID) of the post to be voted on.</li> <li><code>likerObjectID</code> (string): The unique identifier (string) of the user who is voting.</li> <li><code>alreadyLiked</code> (boolean): A flag indicating whether the user has already liked the post.</li> </ul> <p>Returns: A Promise that resolves to the result of the voting operation.</p> <p>Usage:</p> <p>This method uses the provided <code>postObjectID</code> and <code>likerObjectID</code> to update the \"likes\" array of a post in the \"forum\" collection of the database. If <code>alreadyLiked</code> is <code>true</code>, it removes the <code>likerObjectID</code> from the \"likes\" array of the post (i.e., the user unlikes the post). If <code>alreadyLiked</code> is <code>false</code>, it adds the <code>likerObjectID</code> to the \"likes\" array of the post (i.e., the user likes the post).</p>"},{"location":"database/#databasenewsts-file","title":"<code>DatabaseNews.ts</code> File","text":"<p>This file contains the <code>DatabaseNews</code> class that is used for interacting with the <code>news</code> and <code>saved_items</code> collections in the MongoDB database. It extends the <code>Database</code> class and provides methods for performing operations on these collections.</p>"},{"location":"database/#databasenews-class","title":"<code>DatabaseNews</code> class","text":"<p>The <code>DatabaseNews</code> class in the <code>DatabaseNews.ts</code> file extends the <code>Database</code> class and provides methods for performing operations on the <code>news</code> and <code>saved_items</code> collections.</p> <p>Here's a breakdown of the <code>DatabaseNews</code> class:</p> DatabaseNews.ts<pre><code>export default class DatabaseNews extends Database {\n    // Methods for performing operations on the `news` and `saved_items` collections\n}\n</code></pre> <p>This class contains methods for performing operations on the <code>news</code> and <code>saved_items</code> collections. Each method is documented with JSDoc comments.</p> <p>Methods for performing operations on the <code>news</code> and <code>saved_items</code> collections: Here's the table with all the methods from the <code>DatabaseNews</code> class:</p> Method Name Parameters Return Type <code>getAllNews()</code> None <code>Promise&lt;any&gt;</code> <code>getOneNews()</code> <code>news_uid</code>: string | null, <code>_id</code>: ObjectId | null <code>Promise&lt;any&gt;</code> <code>saveNews()</code> <code>user_id</code>: string, <code>news_id</code>: string <code>Promise&lt;any&gt;</code> <p>Please note that the links in the \"Method Name\" column are placeholders and should be replaced with the actual links to the method documentation.</p>"},{"location":"database/#getallnews","title":"getAllNews()","text":"<p>Definition:</p> <pre><code>getAllNews(): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all news information from the database.</p> <p>Parameters: None</p> <p>Returns: A Promise that resolves to an array of all news information objects.</p> <p>Usage:</p> <p>This method performs a <code>find</code> operation on the \"news\" collection in the database with an empty filter (<code>{}</code>), which matches all documents in the collection. It then converts the result to an array with the <code>toArray()</code> method and returns this array.</p>"},{"location":"database/#getonenews","title":"getOneNews()","text":"<p>Definition:</p> <pre><code>getOneNews(news_uid?: string | null, _id?:ObjectId | null): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves information about a single news item from the database by its unique identifier (UID) or ObjectID.</p> <p>Parameters:</p> <ul> <li><code>news_uid</code> (string | null, optional): The unique identifier (UID) of the news item.</li> <li><code>_id</code> (ObjectId | null, optional): The ObjectID of the news item.</li> </ul> <p>Returns: A Promise that resolves to the news information object if found, or null if not found.</p> <p>Usage:</p> <p>This method uses the specified <code>news_uid</code> or <code>_id</code> to search for a news item in the \"news\" collection of the database. If the news item is found, it is logged with a &lt;200&gt; status; otherwise, a &lt;404&gt; status is logged.</p>"},{"location":"database/#savenews","title":"saveNews()","text":"<p>Definition:</p> <pre><code>saveNews(user_id: string, news_id: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method saves a news item for a specific user in the database.</p> <p>Parameters:</p> <ul> <li><code>user_id</code> (string): The unique identifier (ID) of the user who is saving the news item.</li> <li><code>news_id</code> (string): The unique identifier (ID) of the news item to be saved.</li> </ul> <p>Returns: A Promise that resolves to the result of the save operation.</p> <p>Usage:</p> <p>This method uses the provided <code>user_id</code> and <code>news_id</code> to update the \"saved_items\" collection in the database. It finds the document where the <code>user_id</code> field matches the provided <code>user_id</code> and adds the <code>news_id</code> to the \"saved_news\" array of the document.</p>"},{"location":"database/#databaseothersts-file","title":"<code>DatabaseOthers.ts</code> File","text":"<p>This file contains the <code>DatabaseOthers</code> class that is used for interacting with various collections in the MongoDB database. It extends the <code>Database</code> class and provides methods for performing operations on these collections.</p>"},{"location":"database/#databaseothers-class","title":"<code>DatabaseOthers</code> class","text":"<p>The <code>DatabaseOthers</code> class in the <code>DatabaseOthers.ts</code> file extends the <code>Database</code> class and provides methods for performing operations on various collections.</p> <p>Here's a breakdown of the <code>DatabaseOthers</code> class:</p> DatabaseOthers.ts<pre><code>export default class DatabaseOthers extends Database {\n    // Methods for performing operations on various collections\n}\n</code></pre> <p>This class contains methods for performing operations on various collections. Each method is documented with JSDoc comments.</p> <p>Methods for performing operations on various collections:</p> Method Name Parameters Return Type <code>getGlobalSearchResult()</code> <code>query</code>: string <code>Promise&lt;any&gt;</code> <code>getNotifications()</code> <code>userObjectID</code>: string <code>Promise&lt;any&gt;</code> <code>getSavedItems()</code> <code>userObjectID</code>: string <code>Promise&lt;any&gt;</code> <p>Below is a detailed description of each method:</p>"},{"location":"database/#getglobalsearchresult","title":"getGlobalSearchResult()","text":"<p>Definition:</p> <pre><code>getGlobalSearchResult(query: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method performs a global search in the database based on the provided query string.</p> <p>Parameters:</p> <ul> <li><code>query</code> (string): The search query string.</li> </ul> <p>Returns: A Promise that resolves to an object containing the search results from various collections in the database.</p> <p>Usage:</p> <p>This method uses the provided <code>query</code> string to perform a search in the \"user-account\", \"forum\", \"event\", and \"news\" collections of the database. It finds all documents where the <code>full_name</code>, <code>credentials.username</code>, <code>credentials.email</code>, <code>title</code>, <code>post</code>, <code>description</code>, and <code>content</code> fields match the provided <code>query</code> string. The method returns an object containing arrays of matching documents from each collection.</p>"},{"location":"database/#getnotifications","title":"getNotifications()","text":"<p>Definition:</p> <pre><code>getNotifications(userObjectID: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all notifications for a specific user from the database.</p> <p>Parameters:</p> <ul> <li><code>userObjectID</code> (string): The unique identifier (ID) of the user to retrieve notifications for.</li> </ul> <p>Returns: A Promise that resolves to the notifications object for the specified user.</p> <p>Usage:</p> <p>This method uses the specified <code>userObjectID</code> to search for a user in the \"notification\" collection of the database. If the user is found, it returns the user's notifications object.</p>"},{"location":"database/#getsaveditems","title":"getSavedItems()","text":"<p>Definition:</p> <pre><code>getSavedItems(userObjectID: string): Promise&lt;any&gt;\n</code></pre> <p>Access: Public Modifier: Static Asynchronous: Yes</p> <p>Description: This method retrieves all saved items for a specific user from the database.</p> <p>Parameters:</p> <ul> <li><code>userObjectID</code> (string): The unique identifier (ID) of the user to retrieve saved items for.</li> </ul> <p>Returns: A Promise that resolves to the saved items object for the specified user.</p> <p>Usage:</p> <p>This method uses the specified <code>userObjectID</code> to search for a user in the \"saved_items\" collection of the database. If the user is found, it returns the user's saved items object.</p>"},{"location":"docs/","title":"Documentation","text":"<p>This section contains the Documentation of each feature, how they work in the front-end and back-end, and how to use the feature.</p> <p>Here is a list of all the features that are documented below:</p> <ul> <li>E-Farms</li> <li>Forum</li> <li>News</li> <li>Events</li> <li>Animal Health Check Up</li> <li>Search</li> <li>Saving Item</li> </ul>"},{"location":"docs/#e-farms","title":"E-Farms","text":"<p>Inside E-Farms feature, we can perform the following actions</p> <ul> <li>View List of Farms</li> <li>View Individual Farms</li> <li>View Individual Product</li> <li>Purchase Product</li> <li>Add a product to wishlist</li> </ul>"},{"location":"docs/#view-list-of-farms","title":"View List of Farms","text":"<p>When user visits <code>/farms</code> page, a list of farms will be given to the user. For this Functionality</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters : None</p> <p>Steps of showing all farms:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the list of farms from the server by making a GET request to the <code>/API/v1/farms/GetFarmsAPI</code> endpoint.     <pre><code>onMount(async () =&gt; {\n    const response = await fetch('/API/v1/farms/GetFarmsAPI');\n    farms = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched list of farms is stored in the <code>farms</code> variable.</p> </li> <li> <p>A reactive statement (<code>$: {...}</code>) is used to filter the list of farms based on the <code>searchKey</code>. If <code>searchKey</code> is    empty, <code>filteredFarms</code> is set to the full list of farms. If <code>searchKey</code> is not empty, <code>filteredFarms</code> is set to the    list of farms that include <code>searchKey</code> in their <code>farm_name</code> property.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>farms</code>    is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>farms</code> is defined, an <code>{#each ...}</code> block is used to iterate over <code>filteredFarms</code> and    display each farm's information in the UI.</p> </li> </ol>"},{"location":"docs/#view-individual-farms","title":"View Individual Farms","text":"<p>When a user visits a specific farm page or clicks on a farm (e.g., <code>/farms/{farm_uid}</code>), the details of the individual farm are displayed. For this Functionality</p> <p>Front-End Parameters :</p> Parameter Type Description User Click Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description <code>farm_uid</code> Variable Get this variable from Event Object <p>Steps of showing an Individual Farm:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the specific farm's information from the server by making a POST request to the '/API/v1/farms/GetOneFarmAPI'    endpoint, passing the <code>farm_uid</code> as the body of the request.    <pre><code>onMount(async () =&gt; {\n        const response = await fetch('/API/v1/farms/GetOneFarmAPI', {\n        method: 'POST',\n        body: JSON.stringify(farm_uid),\n        headers: {\n        'Content-Type': 'application/json'\n}\n});\n        farm_info = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched farm information is stored in the <code>farm_info</code> variable.</p> </li> <li> <p>Similarly, the farm's products are fetched from the server by making a POST request to the    <code>/API/v1/farms/GetOneFarmProductsAPI</code> endpoint, passing the <code>farm_uid</code> as the body of the request.    <pre><code>onMount(async () =&gt; {\n        const response = await fetch('/API/v1/farms/GetOneFarmProductsAPI', {\n        method: 'POST',\n        body: JSON.stringify(farm_uid),\n        headers: {\n        'Content-Type': 'application/json'\n}\n});\n        farm_products = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched farm products are stored in the <code>farm_products</code> variable.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>farm_info</code>    or <code>farm_products</code> is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>farm_info</code> and <code>farm_products</code> are defined, the farm's information and products are    displayed in the UI.</p> </li> <li> <p>User interactions include hovering over a product, which triggers a scale transition and reveals more information    about the product. Clicking on a product navigates the user to a detailed page for that specific product.</p> </li> </ol>"},{"location":"docs/#view-individual-product","title":"View Individual Product","text":"<p>When a user visits a specific product page (e.g., <code>/farms/{farm_uid}/{product_id}</code>), the details of the individual product are displayed. Here are the steps:</p> <p>Front-End Parameters :</p> Parameter Type Description User Click Event This event gets specific product <p>Back-End Parameters :</p> Parameter Type Description <code>farm_uid</code> Variable Get this variable from Event Object <code>product_uid</code> Variable Get this variable from Event Object <p>Steps of showing an Individual Product:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the specific product's information from the server by making a POST request to the    <code>/API/v1/farms/GetProductInfoAPI</code> endpoint, passing the <code>product_id</code> as the body of the request.    <pre><code>onMount(async () =&gt; {\n  const response = await fetch('/API/v1/farms/GetProductInfoAPI', {\n    method: 'POST',\n    body: JSON.stringify(data.product_id),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  product_information = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched product information is stored in the <code>product_information</code> variable.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>product_information</code>    is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>product_information</code> is defined, the product's information is displayed in the UI.</p> </li> </ol> <p>This way, the details of an individual product are displayed to the user when they visit the product's page.</p>"},{"location":"docs/#payment-process-of-a-livestock","title":"Payment Process of a Livestock","text":"<p>When a user decides to purchase a product, they are redirected to a payment page where they can choose to pay in installments or in full. For this Functionality:</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>product_id</code> Variable Get this variable from current page <code>farm_id</code> Variable Get this variable from current page <code>total_price</code> Variable Get this variable from Product Database <code>product_breed</code> Variable Get this variable from Product Database <ol> <li> <p>The user clicks on the \"Confirm\" button to initiate the payment process. This triggers the <code>processPayment</code> function.</p> </li> <li> <p>In the <code>processPayment</code> function, if the user has chosen to pay in installments, the monthly fee, remaining    installments, next installment date, paid amount, and due amount are calculated and updated in    the <code>paymentInformation</code> object.</p> </li> <li> <p>A POST request is made to the <code>/API/v1/farms/PlaceOrderAPI</code> endpoint, passing the <code>paymentInformation</code> object as the    body of the request. This request is used to place the order and process the payment on the server side.    <pre><code>const response = await fetch('/API/v1/farms/PlaceOrderAPI', {\n   method: 'POST',\n   body: JSON.stringify(\n    paymentInformation\n   ),\n   headers: {\n    'Content-Type': 'application/json'\n   }\n});\n</code></pre></p> </li> <li> <p>Once the payment is processed, the user is redirected to a confirmation page or receives a confirmation message.</p> </li> </ol> <p>This way, the payment process is handled when a user decides to purchase a product.</p>"},{"location":"docs/#add-a-product-to-wishlist","title":"Add a product to wishlist","text":"<p>When a user visits a specific product page (e.g., <code>/farms/{farm_uid}/{product_id}</code>), they can add the product to their wishlist. For this Functionality:</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>product_id</code> Variable Get this variable from current page <ol> <li> <p>The user clicks on the \"Add to Wishlist\" button. This triggers the <code>addToWishlist</code> function.</p> </li> <li> <p>In the <code>addToWishlist</code> function, a POST request is made to the '/API/v1/user/AddToWishlistAPI' endpoint, passing    the <code>user_id</code> and <code>product_id</code> as the body of the request. This request is used to add the product to the user's    wishlist on the server side.    <pre><code>const addToWishlist = async () =&gt; {\n   const response = await fetch('/API/v1/user/AddToWishlistAPI', {\n      method: 'POST',\n      body: JSON.stringify({\n         user_id: user_id,\n         product_id: product_id\n      }),\n      headers: {\n         'Content-Type': 'application/json'\n      }\n   });\n};\n</code></pre></p> </li> <li> <p>Once the product is added to the wishlist, the user is notified with a confirmation message.</p> </li> </ol> <p>This way, a product is added to the user's wishlist when they decide to do so.</p>"},{"location":"docs/#forum","title":"Forum","text":"<p>Inside Forum feature, we can perform the following actions</p> <ul> <li>View List of Posts</li> <li>View Individual Post</li> <li>Create a Post</li> <li>Create a Comment</li> <li>Like a Post</li> <li>Save a Post</li> </ul>"},{"location":"docs/#view-list-of-posts","title":"View List of Posts","text":"<p>When user visits <code>/forum</code> page, a list of posts will be given to the user. For this Functionality:</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters : None</p> <p>Steps of showing all posts:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the list of posts from the server by making a GET request to the <code>/API/v1/forum/GetPostsAPI</code> endpoint.     <pre><code>onMount(async () =&gt; {\n    const response = await fetch('/API/v1/forum/GetPostsAPI');\n    posts = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched list of posts is stored in the <code>posts</code> variable.</p> </li> <li> <p>Sort the post by date, so that the latest post will be on top.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>posts</code>    is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>posts</code> is defined, an <code>{#each ...}</code> block is used to iterate over <code>posts</code> and    display each post's information in the UI.</p> </li> </ol>"},{"location":"docs/#view-individual-post","title":"View Individual Post","text":"<p>When a user visits a specific post page or clicks on a post (e.g., <code>/forum/{post_id}</code>), the details of the individual post are displayed. For this Functionality:</p> <p>Front-End Parameters :</p> Parameter Type Description User Click Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description <code>post_id</code> Variable Get this variable from Event Object <p>Steps of showing an Individual Post:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the specific post's information from the server by making a POST request to the '/API/v1/forum/GetOnePostAPI'    endpoint, passing the <code>post_id</code> as the body of the request.    <pre><code>onMount(async () =&gt; {\n        const response = await fetch('/API/v1/forum/GetOnePostAPI', {\n        method: 'POST',\n        body: JSON.stringify(post_id),\n        headers: {\n        'Content-Type': 'application/json'\n}\n});\n        post_info = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched post information is stored in the <code>post_info</code> variable.</p> </li> <li> <p>Similarly, the post's comments are fetched from the server by making a POST request to the    <code>/API/v1/forum/GetOnePostCommentsAPI</code> endpoint, passing the <code>post_id</code> as the body of the request.    <pre><code>onMount(async () =&gt; {\n        const response = await fetch('/API/v1/forum/GetOnePostCommentsAPI', {\n        method: 'POST',\n        body: JSON.stringify(post_id),\n        headers: {\n        'Content-Type': 'application/json'\n}\n});\n        post_comments = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched post comments are stored in the <code>post_comments</code> variable.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>post_info</code>    or <code>post_comments</code> is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>post_info</code> and <code>post_comments</code> are defined, the post's information and comments are    displayed in the UI.</p> </li> <li> <p>User interactions include clicking on the \"Like\" button, which triggers the <code>likePost</code> function. Clicking on the    \"Save\" button triggers the <code>savePost</code> function. Clicking on the \"Comment\" button triggers the <code>commentPost</code>    function.</p> </li> </ol>"},{"location":"docs/#create-a-post","title":"Create a Post","text":"<p>When a user decides to create a post, they are redirected to a page where they can create a post. For this Functionality:</p> <p>Front-End Parameters :</p> Parameter Type Description Post Title Event This event triggers functionality Post Body Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>post_title</code> Variable Get this variable from current page <code>post_body</code> Variable Get this variable from current page <code>post_date</code> Variable Get this variable from current page <p>Steps of creating a post:</p> <ol> <li>The user enters the post title and post body in the input fields. This triggers the <code>createPost</code> function.</li> <li> <p>In the <code>createPost</code> function, a POST request is made to the <code>/API/v1/forum/CreatePostAPI</code> endpoint, passing the    <code>user_id</code>, <code>post_title</code>, <code>post_body</code>, and <code>post_date</code> as the body of the request. This request is used to create a    post on the server side.    <pre><code>const response = await fetch('/API/v1/forum/CreatePostAPI', {\n   method: 'POST',\n   body: JSON.stringify({\n      user_id: user_id,\n      post_title: post_title,\n      post_body: post_body,\n      post_date: post_date\n   }),\n   headers: {\n      'Content-Type': 'application/json'\n   }\n});\n</code></pre></p> </li> <li> <p>Once the post is created, the user is redirected to the post's page or receives a confirmation message.</p> </li> </ol> <p>This way, a post is created when a user decides to do so.</p>"},{"location":"docs/#create-a-comment","title":"Create a Comment","text":"<p>When a user decides to create a comment, they are redirected to a page where they can create a comment. For this Functionality:</p> <p>Front-End Parameters :</p> Parameter Type Description <code>comment_body</code> Variable The main comment that user wants to post <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>post_id</code> Variable Get this variable from current page <code>comment_body</code> Variable Get this variable from current page <code>comment_date</code> Variable Get this variable from current page <p>Steps of creating a comment:</p> <ol> <li> <p>The user enters the comment body in the input field. Then the user clicks on the \"Comment\" button. This triggers the    <code>createComment</code> function.</p> </li> <li> <p>In the <code>createComment</code> function, a POST request is made to the <code>/API/v1/forum/CreateCommentAPI</code> endpoint, passing     the <code>user_id</code>, <code>post_id</code>, <code>comment_body</code>, and <code>comment_date</code> as the body of the request. This request is used to     create a comment on the server side.     <pre><code>const response = await fetch('/API/v1/forum/CreateCommentAPI', {\n    method: 'POST',\n    body: JSON.stringify({\n        user_id: user_id,\n        post_id: post_id,\n        comment_body: comment_body,\n        comment_date: comment_date\n    }),\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n</code></pre></p> </li> <li> <p>Once the comment is created, the user is redirected to the post's page or receives a confirmation message.</p> </li> </ol> <p>This way, a comment is created when a user decides to do so.</p>"},{"location":"docs/#like-a-post","title":"Like a Post","text":"<p>When a user decides to like a post, they are redirected to a page where they can like a post. For this Functionality:</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>post_id</code> Variable Get this variable from current page <p>Steps of liking a post:</p> <ol> <li> <p>The user clicks on the \"Like\" button. This triggers the <code>likePost</code> function.</p> </li> <li> <p>In the <code>likePost</code> function, a POST request is made to the <code>/API/v1/forum/LikePostAPI</code> endpoint, passing the    <code>user_id</code> and <code>post_id</code> as the body of the request. This request is used to like a post on the server side.    <pre><code>const response = await fetch('/API/v1/forum/LikePostAPI', {\n   method: 'POST',\n   body: JSON.stringify({\n      user_id: user_id,\n      post_id: post_id\n   }),\n   headers: {\n      'Content-Type': 'application/json'\n   }\n});\n</code></pre></p> </li> <li> <p>Once the post is liked, the user is redirected to the post's page or receives a confirmation message.</p> </li> </ol> <p>This way, a post is liked when a user decides to do so.</p>"},{"location":"docs/#save-a-post","title":"Save a Post","text":"<p>When a user decides to save a post, they are redirected to a page where they can save a post. For this</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters :</p> Parameter Type Description <code>user_id</code> Variable Get this variable from <code>UserCache</code> <code>post_id</code> Variable Get this variable from current page <p>Steps of saving a post:</p> <ol> <li> <p>The user clicks on the \"Save\" button. This triggers the <code>savePost</code> function.</p> </li> <li> <p>In the <code>savePost</code> function, a POST request is made to the <code>/API/v1/forum/SavePostAPI</code> endpoint, passing the    <code>user_id</code> and <code>post_id</code> as the body of the request. This request is used to save a post on the server side.    <pre><code>const response = await fetch('/API/v1/forum/SavePostAPI', {\n   method: 'POST',\n   body: JSON.stringify({\n      user_id: user_id,\n      post_id: post_id\n   }),\n   headers: {\n      'Content-Type': 'application/json'\n   }\n});\n</code></pre></p> </li> <li> <p>Once the post is saved, the user is redirected to the post's page or receives a confirmation message.</p> </li> </ol> <p>This way, a post is saved when a user decides to do so.</p>"},{"location":"docs/#news","title":"News","text":"<p>In the news feature, we can perform the following actions :</p> <ul> <li>View List of News</li> <li>View Individual News</li> </ul>"},{"location":"docs/#view-list-of-news","title":"View List of News","text":"<p>When user visits <code>/news</code> page, a list of news will be given to the user. For this feature</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters : None</p> <p>Steps of showing all news:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the list of news from the server by making a GET request to the '/API/v1/news/GetNewsAPI' endpoint.     <pre><code>onMount(async () =&gt; {\n    const response = await fetch('/API/v1/news/GetAllNewsAPI');\n    news = await response.json();\n    console.log(news)\n});\n</code></pre></p> </li> <li> <p>The fetched list of news is stored in the <code>news</code> variable.</p> </li> <li> <p>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>news</code>    is <code>undefined</code>, indicating that the data is still being fetched.</p> </li> <li> <p>Once the data is fetched and <code>news</code> is defined, an <code>{#each ...}</code> block is used to iterate over <code>filteredNews</code> and</p> </li> </ol>"},{"location":"docs/#view-individual-news","title":"View Individual News","text":"<p>When a user visits a specific news page or clicks on a news (e.g., <code>/news/{news_id}</code>), the details of the individual news are displayed. For this functionality</p> <p>Front-End Parameters :</p> Parameter Type Description User Click Event This event triggers the functionality <p>Back-End Parameters :</p> Parameter Type Description Event Object From this event backend gets information about what to do <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the specific farm's information from the server by making a POST request to the '/API/v1/news/GetOneNewsAPI'    endpoint, passing the <code>news_id</code> as the body of the request.    <code>typescript    onMount(async () =&gt; {         const news_response = await fetch('/API/v1/news/GetOneNewsAPI', {             method: 'POST',             body: JSON.stringify(data.newsObjectID),             headers: {                 'Content-Type': 'application/json'             }         });         news_detail = await news_response.json();         console.log(news_detail)         news_ID_navigation.set({             news_id: news_detail._id})     });</code></p> </li> <li> <p>The fetched news information is stored in the <code>news_detail</code> variable.</p> </li> <li>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>news_detail</code>    is <code>undefined</code>, indicating that the data is still being fetched.</li> <li>Finally, all the information is displayed in the UI about the news</li> </ol>"},{"location":"docs/#events","title":"Events","text":"<p>In the events feature, we can perform the following actions :</p> <ul> <li>View List of Events</li> <li>View Individual Event</li> </ul>"},{"location":"docs/#view-list-of-events","title":"View List of Events","text":"<p>When user visits <code>/events</code> page, a list of events will be given to the user. For this feature</p> <p>Front-End Parameters : None</p> <p>Back-End Parameters : None</p> <p>Steps of showing all events:</p> <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the list of events from the server by making a GET request to the '/API/v1/events/GetEventsAPI' endpoint.    <pre><code>onMount(async () =&gt; {\n         const response = await fetch('/API/v1/events/GetAllEventsAPI');\n         data = await response.json();\n});\n</code></pre></p> </li> <li> <p>The fetched list of events is stored in the <code>data</code> variable.</p> </li> <li>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>data</code>    is <code>undefined</code>, indicating that the data is still being fetched.</li> <li>Once the data is fetched and <code>data</code> is defined, an <code>{#each ...}</code> block is used to iterate over <code>filteredEvents</code> and    display each event's information in the UI.</li> </ol>"},{"location":"docs/#view-individual-event","title":"View Individual Event","text":"<p>When a user visits a specific event page or clicks on a event (e.g., <code>/events/{event_id}</code>), the details of the individual event are displayed. For this functionality</p> <p>Front-End Parameters :</p> Parameter Type Description User Click Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description Event Object From this event backend gets information about what to do <ol> <li> <p>When the page is mounted, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function    fetches the specific event's information from the server by making a POST request to the '    /API/v1/events/GetOneEventAPI'    endpoint, passing the <code>event_id</code> as the body of the request.    ```typescript    onMount(async () =&gt; {</p> <pre><code>const response = await fetch(\"/API/v1/events/GetOneEventAPI\", {\n    method: \"POST\",\n    body: (JSON.stringify(data.event_id)),\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n});\n\nevent = await response.json();\n</code></pre> <p>}); ```</p> </li> <li> <p>The fetched event information is stored in the <code>event</code> variable.</p> </li> <li>In the Svelte markup, a conditional block (<code>{#if ...}</code>) is used to display a loading message if <code>event</code>    is <code>undefined</code>, indicating that the data is still being fetched.</li> <li>Finally, all the information is displayed in the UI about the event</li> </ol>"},{"location":"docs/#register-for-events","title":"Register for Events","text":"<p>When a user clicks on the register button on the event page, the user will be registered for the event. For this functionality</p> <p>Front-End Parameters :</p> Parameter Type Description RegistrationForm Object Data collected from the registration form. User Click Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description RegistrationData Object Data received from the frontend containing registration details. <p>When the user clicks on the register button, an asynchronous function is called using the <code>onMount</code> function from Svelte. This function fetches the user's information from the server by making a POST request to the '/API/v1/auth/GetPublicProfile' endpoint, passing the <code>username</code> as the body of the request. <pre><code>   const response = await fetch('/API/v1/auth/GetPublicProfile', {\n   method: 'POST',\n   body: JSON.stringify({\n      \"username\": username,\n   }),\n   headers: {\n      'Content-Type': 'application/json'\n   }\n)\n</code></pre></p>"},{"location":"docs/#health-track","title":"Health-Track","text":"<p>Front-End Parameters :</p> Parameter Type Description User Click Event This event triggers functionality <p>Back-End Parameters :</p> Parameter Type Description Event Object From this event backend get information about what to do <ol> <li>It sends an asynchronous POST request to the '/API/v1/getProductCatalogAPI' endpoint with a JSON payload containing    the 'owner_id' extracted from the 'data' object.</li> </ol> <pre><code>    onMount(async () =&gt; {\n       const response = await fetch('/API/v1/getProductCatalogAPI', {\n           method: \"POST\",\n           body: JSON.stringify({\n               owner_id: data._id\n           }),\n           headers: {\n               'Content-Type': 'application/json'\n           }\n       });\n\n       healthInfo = await response.json();\n\n\n       const allVetsResponse = await fetch('/API/v1/GetAllVetAPI')\n       allVetsData = await allVetsResponse.json();\n    });\n</code></pre> <ol> <li>It then parses the JSON response into the <code>healthInfo</code> variable.</li> <li>It makes another asynchronous GET request to <code>/API/v1/GetAllVetAPI</code> and stores the JSON response in the <code>allVetsData</code>    variable.</li> </ol> <p>Again, this segment of code below :</p> <pre><code>   onMount(async () =&gt; {\n      if (product_category == '' || farm_id == '') {\n         return;\n      }\n      const response = await fetch('/API/v1/farms/GetCategoryProducts', {\n         method: 'POST',\n         body: JSON.stringify(\n                 {\n                    \"product_category\": product_category,\n                    \"farm_id\": farm_id\n                 }\n         ),\n         headers: {\n            'Content-Type': 'application/json'\n         }\n      });\n      products = await response.json();\n   });\n</code></pre> <ol> <li>It uses <code>healthInfo</code> and <code>allVetsData</code> variables to populate the UI with the health information of the animal.</li> <li>It checks if both the <code>product_category</code> and <code>farm_id</code> variables are not empty. If either of them is empty, the    function returns early, avoiding further execution.    Assuming both <code>product_category</code> and <code>farm_id</code> are non-empty, it proceeds to make an asynchronous POST request to    the <code>/API/v1/farms/GetCategoryProducts</code> endpoint. The request includes a JSON payload with the    specified <code>product_category</code> and <code>farm_id</code>.</li> </ol>"},{"location":"docs/#search","title":"Search","text":"<p>When a user searches for a product, they are redirected to a page where they can see the search results. For this Functionality:</p> <p>Front-End Parameters :</p> Parameter Type Description <code>key</code> Variable The search Keyword <p>Back-End Parameters :</p> Parameter Type Description"},{"location":"features/","title":"Features","text":"<p>Welcome to our innovative livestock farming platform, Agri-Inn, where convenience meets community. Explore a network of diverse farms spanning the country, simplifying the process of both farming and acquiring livestock animals. This platform addresses critical gaps in the livestock farming ecosystem in Bangladesh, promoting accessibility and efficiency. It centralizes information and resources, enhancing nationwide collaboration among farmers. The platform's comprehensive approach fosters informed decision-making, positively impacting agricultural practices. By providing a unified marketplace, it streamlines the supply chain, benefiting both producers and consumers.</p>"},{"location":"features/#feature-list","title":"Feature List","text":"<ul> <li>E-Farms</li> <li>Animal Health Check-Up</li> <li>News</li> <li>Events</li> <li>Forum</li> <li>Livestock Marketplace</li> </ul>"},{"location":"features/#e-farms","title":"E-Farms","text":"<p>The E-Farm Platform is a revolutionary feature designed to connect livestock enthusiasts with farms across the globe, creating a seamless online marketplace for buying and exploring livestock animals. This user-friendly platform empowers users to browse through various farms, view livestock offerings, and make informed purchases. The capability to save favorite farms ensures a personalized and efficient experience for users. The notable aspects in this feature are mentioned below :</p> <ul> <li>A diverse array of e-farms from different countries showcasing their livestock offerings.Users can explore farms online, view detailed information, and make purchases directly through the platform.</li> <li>Detailed listings for each livestock animal, including images, descriptions, and relevant details.Users can virtually explore the livestock available on the farm before making a purchase.</li> <li>Comprehensive profiles for each e-farm, providing insights into the farm's history, practices, and additional offerings.</li> <li>E-farm owners have dedicated accounts to manage their profiles and offerings.They can easily add new products, update information, and maintain their farm presence on the platform.</li> <li>Users can search for specific e-farms using keywords such as farm names, locations, or specific livestock breeds.The search feature ensures that users can quickly find farms that align with their preferences.</li> <li>Users can save their favorite e-farms, creating a personalized list for easy access in future visits.This feature eliminates the need to search for the same farms repeatedly, enhancing user convenience.</li> </ul> <p>The E-Farm Platform revolutionizes the livestock buying experience, providing a virtual marketplace for users to explore and purchase livestock from farms across the globe. By combining detailed farm listings, livestock showcases, and the convenience of account management, the platform creates a seamless connection between buyers and e-farm owners. The ability to save favorite farms enhances user convenience, fostering a personalized and efficient user experience within the dynamic world of online livestock trading.</p>"},{"location":"features/#animal-health-check-up","title":"Animal Health Check-Up","text":"<p>The Animal Health Check-Up Management feature is an essential tool for e-farm owners, providing a comprehensive solution for maintaining the health records of their livestock. This feature enables farm owners to keep detailed health records, schedule appointments with veterinarians, and ensure the well-being of their animals. The key sub features of this section are given below : </p> <ul> <li>E-farm owners can maintain individual health records for each animal on the farm.Detailed entries include information on diseases, vaccinations, and feeding schedules, creating a comprehensive health profile.</li> <li>Detailed entries include information on diseases, vaccinations, and feeding schedules, creating a comprehensive health profile.</li> <li>The feature allows for the tracking of diseases ,vaccine and health conditions.</li> </ul> <p>The Animal Health Check-Up Management feature is a crucial component for e-farm owners, providing a centralized and efficient way to oversee the health and well-being of their livestock. The Animal Health Check-Up Management feature exemplifies the commitment to comprehensive care within the e-farming community, ensuring that the livestock is maintained in the best possible health conditions.</p>"},{"location":"features/#news","title":"News","text":"<p>The \"News\" Feature is a comprehensive feature designed to keep users informed and up-to-date about various aspects of the livestock industry. This platform serves as a valuable resource for livestock farmers, providing them with crucial information on diseases, vaccinations, and the latest happenings in the livestock world. The primary goal is to empower users with the knowledge necessary to enhance their livestock farming techniques and overall productivity. The mentionable points to be noted for this feature are given below :</p> <ul> <li>There will be a page dedicated for news to be displayed that can be accessed by the website users about stream of real-time updates, ensuring they stay informed about the latest developments in the industry.</li> <li>The search feature allows users to find specific news articles by typing in keywords related to their interests. Users can search for information on specific diseases, vaccination techniques, or any other topic relevant to their livestock farming needs.</li> <li>Users can save news articles that are particularly relevant or interesting to them. Saved articles can be accessed later for reference, creating a personalized library of valuable information.</li> </ul> <p>The News feature stands as a pivotal resource, connecting users to the latest developments and insights in the livestock industry. By offering a real-time news feed, intuitive search functionality, and the capability to save articles, it empowers users to stay abreast of crucial information for optimizing their farming practices.</p>"},{"location":"features/#events","title":"Events","text":"<p>The Livestock Events Platform is a dynamic feature designed to streamline the organization and participation in livestock-related events. This platform serves as a centralized hub for users to discover upcoming events, allowing farm owners to showcase their animals and products. The integration of online registration and payment options simplifies the process for both event organizers and participants.The key sub features of this section are given below :</p> <ul> <li>A comprehensive listing of upcoming livestock events, including shows, fairs, and exhibitions.Users can easily browse through events to find those of interest, enhancing their awareness of opportunities in their vicinity.</li> <li>Each event listing provides detailed information, including date, time, location, and a description of the activities planned.Users can make informed decisions about which events to attend based on the available information.Farm owners and participants can register for events seamlessly through the platform.</li> <li>Farm owners and participants can register for events seamlessly through the platform.Registration forms capture essential details, such as the number of animals to be showcased, booth requirements, and any additional preferences.</li> <li>The platform supports online payment for event registration fees, making the process secure and convenient.</li> <li>Users can opt to receive notifications about upcoming events in their preferred geographic locations.</li> <li>The search feature allows users to find specific events by entering event names or locations.</li> </ul> <p>The Livestock Events feature is a valuable tool for both farm owners and participants, providing a centralized space to discover, register for, and stay informed about upcoming events in the livestock industry. The integration of online registration and payment options enhances user convenience, making it easier for stakeholders to participate and showcase their animals and products.</p>"},{"location":"features/#forum","title":"Forum","text":"<p>The Forum is a collaborative space designed to foster a sense of community among users, specifically catering to farm owners and individuals involved in the livestock industry. This feature serves as a platform for users to seek advice, share experiences, and engage in discussions related to livestock health, issues, and queries. The inclusion of trending sections highlights popular and valuable content, contrib uting to a dynamic and supportive community.The mentionable sub features in this section are given below :</p> <ul> <li>Users can create discussion threads by creating post queries, share experiences, or seek advice related to livestock animals and farming practices.Threads cover a wide range of topics, including health concerns, breeding, feeding practices, and general farm management.</li> <li>Users can engage with each other through comments, providing insights, suggestions, and solutions to posted queries.</li> <li>Users have the option to express appreciation for helpful posts by liking or upvoting them.</li> <li>The forum includes a dedicated section highlighting trending posts, showcasing those with the most likes and views.</li> <li>The powerful search feature enables users to find specific topics, threads, or posts by entering keywords or phrases.</li> </ul> <p>The Livestock Forum stands as an invaluable resource for users seeking to connect, exchange insights, and collectively navigate the challenges and opportunities within the livestock industry.</p>"},{"location":"features/#livestock-marketplace","title":"Livestock Marketplace","text":"<p>The Livestock Marketplace feature serves as a virtual marketplace for a wide array of products related to the livestock industry. From dairy products to animal food, medicines, and farm equipment, this feature provides a centralized platform for sellers to showcase their products and for customers to conveniently browse, purchase, and pay for the items they need.</p> <ul> <li>Sellers can list their dairy products, livestock animal food, medicines, and farm equipment with detailed descriptions and images.Customers can easily browse through a diverse range of offerings in one centralized marketplace.</li> <li>Users can add desired items to their shopping carts while browsing the marketplace.</li> <li>The platform supports various payment methods, including online payment and cash on delivery.Customers can choose their preferred payment option, ensuring flexibility and convenience.</li> <li>A prominent search bar is available on the Livestock Marketplace interface.</li> </ul> <p>The Livestock Marketplace feature provides a seamless and convenient avenue for sellers to showcase their products and for customers to access a diverse range of items related to the livestock industry.The Livestock Marketplace stands as a valuable resource, connecting buyers and sellers within the livestock community, fostering a dynamic and efficient marketplace for all stakeholders.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Agri-Inn</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}